{
    "guidelines": [
        {
            "name": "1.1.1 Non-text Content",
            "level": "A",
            "description": "All non-text content that is presented to the user has a text alternative that serves the equivalent purpose, except for the situations listed below.",
            "url": "https://www.w3.org/TR/WCAG22/#non-text-content",
            "guideline_description": "Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Controls, Input",
                    "description": "If non-text content is a control or accepts user input, then it has a name that describes its purpose. (Refer to Guideline 4.1 for additional requirements for controls and content that accepts user input.)"
                },
                {
                    "type": "exception",
                    "title": "Time-based Media",
                    "description": "If non-text content is time-based media, then text alternatives at least provide descriptive identification of the non-text content. (Refer to Guideline 1.2 for additional requirements for media.)"
                },
                {
                    "type": "exception",
                    "title": "Test",
                    "description": "If non-text content is a test or exercise that would be invalid if presented in text, then text alternatives at least provide descriptive identification of the non-text content."
                },
                {
                    "type": "exception",
                    "title": "Sensory",
                    "description": "If non-text content is primarily intended to create a specific sensory experience, then text alternatives at least provide descriptive identification of the non-text content."
                },
                {
                    "type": "exception",
                    "title": "CAPTCHA",
                    "description": "If the purpose of non-text content is to confirm that content is being accessed by a person rather than a computer, then text alternatives that identify and describe the purpose of the non-text content are provided, and alternative forms of CAPTCHA using output modes for different types of sensory perception are provided to accommodate different disabilities."
                },
                {
                    "type": "exception",
                    "title": "Decoration, Formatting, Invisible",
                    "description": "If non-text content is pure decoration, is used only for visual formatting, or is not presented to users, then it is implemented in a way that it can be ignored by assistive technology."
                }
            ],
            "techniques": [
                "Provide descriptive `alt` attributes for all informative images.",
                "Use `aria-label` or `aria-labelledby` for icons used as buttons or interactive elements to describe their purpose.",
                "Include text transcripts for audio content and captions for videos to ensure equivalent text alternatives.",
                "Utilize `aria-describedby` to provide additional context for complex images, such as charts or graphs.",
                "Implement `null` (empty) `alt` attributes for decorative images to ensure they are ignored by screen readers.",
                "Provide text descriptions for all CAPTCHA challenges and ensure alternative methods are available for users with disabilities."
            ],
            "failures": [
                "Omitting `alt` attributes for images, leaving them unlabeled for screen readers.",
                "Using images of text without providing a text alternative.",
                "Providing vague or non-descriptive `alt` text that does not convey the purpose or content of the image.",
                "Relying solely on visual CAPTCHAs without accessible alternatives.",
                "Misusing `alt` attributes by including extraneous information, which can confuse users of assistive technologies."
            ]
        },
        {
            "name": "1.2.1 Audio-only and Video-only (Prerecorded)",
            "level": "A",
            "description": "For prerecorded audio-only and prerecorded video-only media, the following are true, except when the audio or video is a media alternative for text and is clearly labeled as such.",
            "url": "https://www.w3.org/TR/WCAG22/#audio-only-and-video-only-prerecorded",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "Prerecorded Audio-only",
                    "description": "An alternative for time-based media is provided that presents equivalent information for prerecorded audio-only content."
                },
                {
                    "type": "all_true",
                    "title": "Prerecorded Video-only",
                    "description": "Either an alternative for time-based media or an audio track is provided that presents equivalent information for prerecorded video-only content."
                }
            ],
            "techniques": [
                "Provide a text transcript for prerecorded audio-only content that includes all spoken dialogue and relevant non-speech information.",
                "Offer a descriptive transcript for prerecorded video-only content that describes the visual information and any relevant context.",
                "For prerecorded video-only media, provide an audio description track that narrates the visual content for users who are unable to see it.",
                "Ensure that any alternatives for time-based media are easily accessible and clearly linked or labeled on the webpage.",
                "Use captions or subtitles for prerecorded video-only content when it contains text or other visual information that is essential for understanding."
            ],
            "failures": [
                "Failing to provide a text transcript for prerecorded audio-only content.",
                "Not offering a descriptive transcript or audio track for prerecorded video-only content.",
                "Incorrectly labeling audio or video media as an alternative for text without providing a clear equivalent in the alternative.",
                "Assuming that users can understand video content without an audio description or equivalent alternative."
            ]
        },
        {
            "name": "1.2.2 Captions (Prerecorded)",
            "level": "A",
            "description": "Captions are provided for all prerecorded audio content in synchronized media, except when the media is a media alternative for text and is clearly labeled as such.",
            "url": "https://www.w3.org/TR/WCAG22/#captions-prerecorded",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": null,
            "techniques": [
                "Use captioning tools or services to generate accurate captions for prerecorded audio content in videos.",
                "Embed captions directly into video files using video editing software to ensure they are always available.",
                "Utilize video players that support closed captions, allowing users to enable or disable captions as needed.",
                "Ensure captions are synchronized with the audio content, providing accurate timing to match speech and sounds.",
                "Provide captions in multiple languages if your content is available in different languages to cater to a diverse audience."
            ],
            "failures": [
                "Failing to provide any captions for prerecorded audio content in synchronized media.",
                "Using inaccurate or incomplete captions that do not match the spoken content or timing.",
                "Relying solely on auto-generated captions without reviewing and editing for accuracy.",
                "Not making captions available for video content that includes important audio information."
            ]
        },
        {
            "name": "1.2.3 Audio Description or Media Alternative (Prerecorded)",
            "level": "A",
            "description": "An alternative for time-based media or audio description of the prerecorded video content is provided for synchronized media, except when the media is a media alternative for text and is clearly labeled as such.",
            "url": "https://www.w3.org/TR/WCAG22/#audio-description-or-media-alternative-prerecorded",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": null,
            "techniques": [
                "Provide a separate audio track that includes an audio description of the key visual content for prerecorded video.",
                "Offer a text transcript that includes descriptions of visual content, dialogue, and other relevant audio information.",
                "Use video players that support audio description tracks and ensure that the feature is easily accessible to users.",
                "Clearly label media alternatives for text, indicating that they are not the primary content but support the text.",
                "Implement a toggle option in the video player that allows users to switch between the main audio and the audio description track."
            ],
            "failures": [
                "Failing to provide any form of audio description or alternative text for video content.",
                "Using only a visual representation of data without an accompanying audio description or text alternative.",
                "Not labeling media alternatives for text, leading to confusion about the purpose of the media.",
                "Relying on auto-generated captions or descriptions without human review, resulting in inaccurate or incomplete information."
            ]
        },
        {
            "name": "1.2.4 Captions (Live)",
            "level": "AA",
            "description": "Captions are provided for all live audio content in synchronized media.",
            "url": "https://www.w3.org/TR/WCAG22/#captions-live",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": null,
            "techniques": [
                "Use a live captioning service or platform that supports real-time captioning for live events.",
                "Integrate automatic speech recognition (ASR) technologies to generate live captions and provide real-time text updates.",
                "Employ a professional live captioner or stenographer to ensure accurate and timely captions during live broadcasts.",
                "Utilize a media player that supports live captioning and allows users to easily toggle captions on or off.",
                "Implement a caption editing tool for live events to allow for corrections and improvements during the broadcast."
            ],
            "failures": [
                "Not providing any captions for live audio content during webinars or live streams.",
                "Relying solely on post-event transcription without offering live captions.",
                "Using a media player that does not support the display of live captions.",
                "Providing captions that are significantly delayed, making them ineffective in synchronizing with the audio content."
            ]
        },
        {
            "name": "1.2.5 Audio Description (Prerecorded)",
            "level": "AA",
            "description": "Audio description is provided for all prerecorded video content in synchronized media.",
            "url": "https://www.w3.org/TR/WCAG22/#audio-description-prerecorded",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": null,
            "techniques": [
                "Include an audio description track within video players that support multiple audio tracks, allowing users to switch to the described version.",
                "Utilize third-party services or software to create audio descriptions and integrate them into your video content.",
                "Provide a separate video with embedded audio description and link it clearly alongside the original video.",
                "Use media players that support audio description and ensure they are configured correctly to allow users to enable this feature.",
                "Create a transcript that includes descriptions of visual content and offer it as an alternative format for users."
            ],
            "failures": [
                "Failing to provide an audio description for videos that have important visual content not described in the audio.",
                "Using automated tools that provide inaccurate or incomplete audio descriptions without manual review and editing.",
                "Offering audio descriptions that are out of sync with the video content, leading to confusion for users.",
                "Providing only a text transcript without an actual audio description track for videos that contain significant visual information."
            ]
        },
        {
            "name": "1.2.6 Sign Language (Prerecorded)",
            "level": "AAA",
            "description": "Sign language interpretation is provided for all prerecorded audio content in synchronized media.",
            "url": "https://www.w3.org/TR/WCAG22/#sign-language-prerecorded",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": null,
            "techniques": [
                "Integrate sign language interpretation as a synchronized, picture-in-picture video overlay within the media player for prerecorded content.",
                "Provide a separate video track featuring a sign language interpreter that can be toggled on or off by the user.",
                "Use media players that support captioning and sign language interpretation features, allowing users to choose their preferred mode of access.",
                "Ensure that the sign language interpreter is clearly visible, with adequate contrast and size relative to the main video content.",
                "Offer downloadable sign language interpretation files alongside the media content for offline access."
            ],
            "failures": [
                "Failing to provide any form of sign language interpretation for prerecorded synchronized media.",
                "Making sign language interpretations available only through external, third-party platforms without integration into the web application.",
                "Providing sign language interpretation that is poorly synchronized with the audio content, causing mismatches in timing.",
                "Using a video player that does not support the addition of sign language interpretation or fails to make it accessible to users."
            ]
        },
        {
            "name": "1.2.7 Extended Audio Description (Prerecorded)",
            "level": "AAA",
            "description": "Where pauses in foreground audio are insufficient to allow audio descriptions to convey the sense of the video, extended audio description is provided for all prerecorded video content in synchronized media.",
            "url": "https://www.w3.org/TR/WCAG22/#extended-audio-description-prerecorded",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": null,
            "techniques": [
                "Insert additional pauses in the video to accommodate extended audio descriptions, ensuring the flow of information is maintained without overlapping dialogue or important sounds.",
                "Provide a separate version of the video with extended audio descriptions, allowing users to choose this option if needed.",
                "Use scripting or multimedia authoring tools to synchronize extended audio descriptions with the video timeline effectively, ensuring accurate timing and sequencing.",
                "Collaborate with professional audio describers to create high-quality extended audio descriptions that capture essential visual content and context.",
                "Implement a user interface control that allows users to switch between standard and extended audio description versions seamlessly."
            ],
            "failures": [
                "Failing to provide sufficient audio description for complex or highly visual content, leading to important information being missed by users with visual impairments.",
                "Overlapping audio descriptions with existing audio content, making it difficult for users to understand both the descriptions and the original audio.",
                "Relying solely on background music or ambient sounds during pauses without incorporating extended audio descriptions to explain critical visual elements.",
                "Not offering any form of audio description for prerecorded video content, leaving users without access to crucial visual information."
            ]
        },
        {
            "name": "1.2.8 Media Alternative (Prerecorded)",
            "level": "AAA",
            "description": "An alternative for time-based media is provided for all prerecorded synchronized media and for all prerecorded video-only media.",
            "url": "https://www.w3.org/TR/WCAG22/#media-alternative-prerecorded",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": null,
            "techniques": [
                "Provide a text transcript for all prerecorded synchronized media, including both audio and visual content.",
                "Offer a text description of the visual content for prerecorded video-only media.",
                "Create an audio description track that describes the important visual details in the video for users who cannot see the video.",
                "Use descriptive captions that include not just dialogue but also relevant sound effects and speaker identification.",
                "Implement a media player that supports easy access to alternative media formats, such as transcripts or audio descriptions."
            ],
            "failures": [
                "Failing to provide a text transcript for videos with both audio and visual content.",
                "Neglecting to describe important visual information in a video-only media through text.",
                "Providing captions that only cover dialogue, omitting important sound effects or speaker identification.",
                "Relying solely on captions without offering a full transcript for complex media that includes non-verbal information."
            ]
        },
        {
            "name": "1.2.9 Audio-only (Live)",
            "level": "AAA",
            "description": " An alternative for time-based media that presents equivalent information for live audio-only content is provided.",
            "url": "https://www.w3.org/TR/WCAG22/#audio-only-live",
            "guideline_description": "Provide alternatives for time-based media.",
            "special_cases": null,
            "techniques": [
                "Provide a live text transcript that is updated in real-time to accompany the live audio content.",
                "Use a text-based chat or live blog to convey the essential audio information as it happens.",
                "Offer a sign language interpretation via video alongside the live audio stream for users who rely on sign language.",
                "Implement a live captions feature that transcribes the audio content into text as it is broadcasted.",
                "Ensure that the text alternative is accessible and can be navigated using assistive technologies."
            ],
            "failures": [
                "Failing to offer any form of text alternative for live audio content.",
                "Providing a summary instead of a real-time text equivalent for live audio.",
                "Relying solely on post-event transcripts, which do not help users needing access during the live event.",
                "Not updating the text alternative promptly, leading to delays in delivering equivalent information."
            ]
        },
        {
            "name": "1.3.1 Info and Relationships",
            "level": "A",
            "description": "Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.",
            "url": "https://www.w3.org/TR/WCAG22/#info-and-relationships",
            "guideline_description": "Create content that can be presented in different ways (for example simpler layout) without losing information or structure.",
            "special_cases": null,
            "techniques": [
                "Use semantic HTML elements, such as `<header>`, `<nav>`, `<main>`, `<footer>`, `<section>`, and `<article>`, to define the structure of the content.",
                "Implement headings (`<h1>`, `<h2>`, `<h3>`, etc.) in a logical order to reflect the hierarchy and structure of the content.",
                "Use lists (`<ul>`, `<ol>`, `<dl>`) to group related items and convey their relationship.",
                "Associate data cells with header cells in tables using the `<th>` element and the `scope` or `headers` attributes for better readability and understanding.",
                "Use the `aria-labelledby` and `aria-describedby` attributes to provide additional context and relationships for elements that require more detailed descriptions."
            ],
            "failures": [
                "Using `<div>` and `<span>` elements for structure without providing additional context or semantic meaning.",
                "Relying on visual layout alone (e.g., indentation or positioning) to convey relationships without appropriate structural markup.",
                "Failing to associate form labels with their corresponding input fields using the `<label>` element and the `for` attribute.",
                "Using tables for layout purposes instead of for presenting tabular data, which can confuse users relying on assistive technologies."
            ]
        },
        {
            "name": "1.3.2 Meaningful Sequence",
            "level": "A",
            "description": "When the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined.",
            "url": "https://www.w3.org/TR/WCAG22/#meaningful-sequence",
            "guideline_description": "Create content that can be presented in different ways (for example simpler layout) without losing information or structure.",
            "special_cases": null,
            "techniques": [
                "Use HTML semantic elements like `<article>`, `<section>`, `<header>`, `<footer>`, and `<aside>` to define the structure and sequence of content meaningfully.",
                "Implement the correct order of content using HTML markup, such as using `<ol>` for ordered lists when the sequence is important.",
                "Ensure that the reading order of content matches the visual order, especially when using CSS for layout adjustments like `flexbox` or `grid`.",
                "Use ARIA landmarks (e.g., `role=\"main\"`, `role=\"navigation\"`) to help assistive technologies determine the structure and sequence of content.",
                "Verify the logical tab order with the `tabindex` attribute to ensure it aligns with the visual and reading order of the content."
            ],
            "failures": [
                "Using CSS to visually position content in a way that doesn't match the logical reading order in the HTML.",
                "Structuring a page with tables for layout purposes, which can confuse the reading sequence for assistive technologies.",
                "Relying solely on JavaScript to render content order dynamically without ensuring the underlying HTML structure supports a meaningful sequence.",
                "Ignoring the sequential importance when embedding multimedia content, failing to provide transcripts or descriptions that preserve the intended sequence."
            ]
        },
        {
            "name": "1.3.3 Sensory Characteristics",
            "level": "A",
            "description": "Instructions provided for understanding and operating content do not rely solely on sensory characteristics of components such as shape, size, visual location, orientation, or sound.",
            "url": "https://www.w3.org/TR/WCAG22/#sensory-characteristics",
            "guideline_description": "Create content that can be presented in different ways (for example simpler layout) without losing information or structure.",
            "special_cases": null,
            "techniques": [
                "Provide text-based instructions that do not rely solely on visual characteristics (e.g., \"Click the 'Submit' button\" instead of \"Click the green button\").",
                "Use numbered or bulleted lists to describe steps or processes instead of relying on spatial or sensory descriptions.",
                "Ensure that all interactive elements have descriptive labels that are programmatically associated with them.",
                "Include textual descriptions or labels next to icons or graphical elements to clarify their function.",
                "Design forms and instructions using clear, concise language that does not rely on the shape or location of elements."
            ],
            "failures": [
                "Providing instructions like \"Press the button to the right\" without textual indication of which button.",
                "Using only sound cues to indicate an action without providing a visual or textual alternative.",
                "Referring to UI elements solely by their size or shape, such as \"Select the large square\" without additional context.",
                "Relying on the spatial location (e.g., \"The link at the top of the page\") without additional descriptive text."
            ]
        },
        {
            "name": "1.3.4 Orientation",
            "level": "AA",
            "description": "Content does not restrict its view and operation to a single display orientation, such as portrait or landscape, unless a specific display orientation is essential.",
            "url": "https://www.w3.org/TR/WCAG22/#orientation",
            "guideline_description": "Create content that can be presented in different ways (for example simpler layout) without losing information or structure.",
            "special_cases": null,
            "techniques": [
                "Use responsive web design techniques, such as CSS flexbox or grid, to allow content to adapt fluidly to both portrait and landscape orientations.",
                "Implement media queries to adjust layout and styling based on screen orientation, ensuring usability and readability in both orientations.",
                "Design touch targets and interactive elements to function correctly and remain accessible regardless of display orientation.",
                "Test the application on various devices to ensure that content and functionality are preserved in any orientation.",
                "Use viewport meta tags appropriately to control layout scaling and ensure content is viewable in different orientations without horizontal scrolling."
            ],
            "failures": [
                "Designing a web application where critical content or functionality is inaccessible or hidden in one orientation.",
                "Using fixed-width layouts that prevent content from adapting to different screen orientations.",
                "Implementing interactive elements that become difficult to use or inaccessible when the device orientation changes.",
                "Creating media or images that require specific orientations without providing alternatives or flexibility for users."
            ]
        },
        {
            "name": "1.3.5 Identify Input Purpose",
            "level": "AA",
            "description": "The purpose of each input field collecting information about the user can be programmatically determined when:",
            "url": "https://www.w3.org/TR/WCAG22/#identify-input-purpose",
            "guideline_description": "Create content that can be presented in different ways (for example simpler layout) without losing information or structure.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "The input field serves a purpose identified in the Input Purposes for User Interface Components section; and"
                },
                {
                    "type": "all_true",
                    "title": "The content is implemented using technologies with support for identifying the expected meaning for form input data."
                }
            ],
            "techniques": [
                "Use the HTML `autocomplete` attribute to specify input purposes, such as `autocomplete=\"name\"`, `autocomplete=\"email\"`, or `autocomplete=\"tel\"`.",
                "Implement ARIA roles and properties to enhance semantic information about input fields when native HTML attributes are insufficient.",
                "Leverage HTML5 input types like `type=\"email\"`, `type=\"tel\"`, and `type=\"url\"` to provide browsers with inherent meaning.",
                "Use appropriate HTML labels and ensure they are correctly associated with their input fields using the `for` attribute.",
                "Validate and ensure that form controls are implemented using technologies that support programmatic determination of input purpose."
            ],
            "failures": [
                "Omitting the `autocomplete` attribute on input fields that collect personal information, making it difficult for assistive technologies to determine purpose.",
                "Using generic input types like `type=\"text\"` without additional context or attributes where specific input types exist.",
                "Failing to associate labels with input fields, either by not using a `<label>` element or by not linking it with the `for` attribute.",
                "Implementing custom input elements without providing sufficient semantic information or ARIA attributes to identify their purpose.",
                "Relying solely on visual cues (such as placeholder text) to convey the purpose of input fields without programmatic determination."
            ]
        },
        {
            "name": "1.3.6 Identify Purpose",
            "level": "AAA",
            "description": "In content implemented using markup languages, the purpose of User Interface Components, icons, and regions can be programmatically determined.",
            "url": "https://www.w3.org/TR/WCAG22/#identify-purpose",
            "guideline_description": "Create content that can be presented in different ways (for example simpler layout) without losing information or structure.",
            "special_cases": null,
            "techniques": [
                "Use ARIA roles and properties to define the purpose of user interface components clearly, such as `role=\"button\"` for interactive elements.",
                "Implement HTML5 semantic elements, like `<header>`, `<footer>`, `<nav>`, and `<main>`, to clearly define regions of content.",
                "Apply `aria-label` or `aria-labelledby` attributes to icons and controls to provide descriptive labels programmatically.",
                "Use `role=\"region\"` and `aria-labelledby` to identify significant sections of a page and provide a programmatically determinable name.",
                "Ensure landmarks are used appropriately, such as `<aside>`, `<section>`, and `<article>`, to allow users to navigate content easily."
            ],
            "failures": [
                "Failing to use semantic HTML, relying solely on `<div>` and `<span>` elements without meaningful roles or labels.",
                "Omitting ARIA roles and labels on custom components, making the purpose unclear to assistive technologies.",
                "Using icons without accompanying text or labels, leaving their purpose ambiguous.",
                "Overusing ARIA roles unnecessarily, which can lead to confusion or redundancy in accessibility information."
            ]
        },
        {
            "name": "1.4.1 Use of Color",
            "level": "A",
            "description": "Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.",
            "url": "https://www.w3.org/TR/WCAG22/#use-of-color",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": null,
            "techniques": [
                "Use text labels or icons in addition to color to convey information or indicate actions (e.g., adding a text label \"required\" next to a red asterisk for required fields).",
                "Implement patterns or textures along with color to differentiate elements (e.g., using different border styles as well as color to highlight selected items).",
                "Provide descriptive tooltips or additional text information on hover or focus for color-coded elements (e.g., displaying a tooltip explaining the color coding of a chart).",
                "Use underlines or other visual indicators, in addition to color, to distinguish links from other text content.",
                "Ensure that color-coded messages or alerts are accompanied by text that conveys the same information (e.g., a green checkmark icon with the text \"Success\")."
            ],
            "failures": [
                "Relying solely on color to indicate form field errors without additional text or symbols.",
                "Using color alone to differentiate between active and inactive elements, such as tabs or buttons.",
                "Providing color-coded instructions or legends without accompanying text explanations.",
                "Creating charts or graphs that use color alone to distinguish between different data series or categories.",
                "Using color differences to indicate interactive elements, such as links, without other visual cues such as underlining."
            ]
        },
        {
            "name": "1.4.2 Audio Control",
            "level": "A",
            "description": "If any audio on a Web page plays automatically for more than 3 seconds, either a mechanism is available to pause or stop the audio, or a mechanism is available to control audio volume independently from the overall system volume level.",
            "url": "https://www.w3.org/TR/WCAG22/#audio-control",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": null,
            "techniques": [
                "Implement a \"mute\" button or control that allows users to stop audio playback immediately.",
                "Provide a \"pause\" button that enables users to pause audio playback at any time.",
                "Include a volume control slider specifically for the audio content, allowing users to adjust the audio level independently from the system volume.",
                "Use HTML `<audio>` element controls attribute to ensure built-in controls are available for users to manage playback.",
                "Design the web page so that any audio that plays automatically stops after 3 seconds unless user interaction occurs."
            ],
            "failures": [
                "Audio plays automatically for more than 3 seconds without any available user controls to stop or pause it.",
                "Relying solely on the system volume control to manage audio playback without providing independent control on the webpage.",
                "Audio controls are present but not accessible via keyboard navigation, making it difficult for users with disabilities to stop or adjust the audio.",
                "Implementing audio controls that are not visible or easily discoverable by users, causing them to miss the option to control playback."
            ]
        },
        {
            "name": "1.4.3 Contrast (Minimum)",
            "level": "AA",
            "description": " The visual presentation of text and images of text has a contrast ratio of at least 4.5:1, except for the following:",
            "url": "https://www.w3.org/TR/WCAG22/#contrast-minimum",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Large Text",
                    "description": "Large-scale text and images of large-scale text have a contrast ratio of at least 3:1;"
                },
                {
                    "type": "exception",
                    "title": "Incidental",
                    "description": "Text or images of text that are part of an inactive user interface component, that are pure decoration, that are not visible to anyone, or that are part of a picture that contains significant other visual content, have no contrast requirement."
                },
                {
                    "type": "exception",
                    "title": "Logotypes",
                    "description": "Text that is part of a logo or brand name has no minimum contrast requirement."
                }
            ],
            "techniques": [
                "Use a color contrast checking tool to verify that text and images of text meet the minimum contrast ratio of 4.5:1 against their background.",
                "Choose text and background colors that inherently have high contrast, such as dark text on a light background or vice versa.",
                "Increase the font size or use bold text to qualify for the lower contrast ratio requirement of 3:1 for large-scale text.",
                "Test contrast in different lighting conditions and on various devices to ensure readability across environments.",
                "Implement CSS custom properties (variables) for colors, allowing for easy adjustments to maintain adequate contrast across different themes or modes (e.g., dark mode)."
            ],
            "failures": [
                "Using low-contrast color combinations for text and background, making it difficult for users with low vision to read the content.",
                "Overlooking text contrast requirements for dynamically generated content or text within images.",
                "Ignoring the contrast requirements for text embedded within complex background images or patterns.",
                "Assuming that default browser styling will always provide sufficient contrast without verification.",
                "Using color gradients or overlay effects on text without ensuring the resulting contrast remains within acceptable levels."
            ]
        },
        {
            "name": "1.4.4 Resize text",
            "level": "AA",
            "description": "Except for captions and images of text, text can be resized without assistive technology up to 200 percent without loss of content or functionality.",
            "url": "https://www.w3.org/TR/WCAG22/#resize-text",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": null,
            "techniques": [
                "Use relative units like ems or percentages for font sizes instead of fixed units like pixels to allow for flexible text resizing.",
                "Implement responsive design principles, such as media queries, to adjust layout and ensure content remains functional and visible when text size is increased.",
                "Ensure that text containers (e.g., divs, spans) have sufficient space and do not have fixed heights, allowing for expansion when text is resized.",
                "Test the website by manually increasing text size in various browsers to ensure it scales correctly up to 200% without loss of content or functionality.",
                "Use CSS techniques like `min-width` and `max-width` to allow text containers to expand appropriately when text size is increased.",
                "Ensure that any custom fonts used are legible and maintain clarity when resized, and consider providing fallback options for better readability."
            ],
            "failures": [
                "Setting text elements with fixed sizes that do not accommodate increased font sizes, leading to content overlap or cutoff.",
                "Designing layouts that break or become unusable when text size is increased, such as using absolute positioning without considering text size changes.",
                "Using images of text that cannot be resized, which prevents users from increasing the text size.",
                "Overlapping or truncated text that becomes unreadable when resized due to insufficient container space.",
                "Reliance on non-responsive design that does not adjust to larger text sizes, causing layout issues and loss of information."
            ]
        },
        {
            "name": "1.4.5 Images of Text",
            "level": "AA",
            "description": "If the technologies being used can achieve the visual presentation, text is used to convey information rather than images of text except for the following:",
            "url": "https://www.w3.org/TR/WCAG22/#images-of-text",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Customizable",
                    "description": "The image of text can be visually customized to the user's requirements;"
                },
                {
                    "type": "exception",
                    "title": "Essential",
                    "description": "A particular presentation of text is essential to the information being conveyed."
                }
            ],
            "techniques": [
                "Use CSS to style text instead of embedding text within images.",
                "Employ web fonts to ensure consistent and customizable text presentation across different devices and browsers.",
                "Provide options for users to adjust text properties such as size, color, and spacing to meet their needs.",
                "Use SVG for text if a specific graphical effect is necessary, while ensuring the text remains accessible and customizable.",
                "Leverage HTML and CSS to recreate text effects or styles that might be used in images, ensuring they remain scalable and adaptable."
            ],
            "failures": [
                "Embedding important textual information within an image without providing a text alternative.",
                "Using images of text for headings or body content where plain text could be used instead.",
                "Failing to allow for customization of text when images of text are used, making it difficult for users with specific visual needs.",
                "Relying on images of text for essential information that cannot be adjusted or read by screen readers."
            ]
        },
        {
            "name": "1.4.6 Contrast (Enhanced)",
            "level": "AAA",
            "description": "The visual presentation of text and images of text has a contrast ratio of at least 7:1, except for the following: ",
            "url": "https://www.w3.org/TR/WCAG22/#contrast-enhanced",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Large Text",
                    "description": "Large-scale text and images of large-scale text have a contrast ratio of at least 4.5:1;"
                },
                {
                    "type": "exception",
                    "title": "Incidental",
                    "description": "Text or images of text that are part of an inactive user interface component, that are pure decoration, that are not visible to anyone, or that are part of a picture that contains significant other visual content, have no contrast requirement."
                },
                {
                    "type": "exception",
                    "title": "Logotypes",
                    "description": "Text that is part of a logo or brand name has no minimum contrast requirement."
                }
            ],
            "techniques": [
                "Use a color contrast checking tool during the design phase to ensure text and images of text meet the 7:1 contrast ratio requirement.",
                "Employ CSS to set default text and background colors that adhere to the contrast ratio guidelines.",
                "Design large-scale text (18pt and larger, or 14pt and larger in bold) with at least a 4.5:1 contrast ratio to accommodate the exception for large text.",
                "Implement user interface components with states that maintain the required contrast ratios, ensuring accessibility across different UI states.",
                "Regularly test your web application with a screen reader to verify that visual contrast is sufficient for users with visual impairments."
            ],
            "failures": [
                "Failing to maintain the minimum contrast ratio of 7:1 for regular text and images of text.",
                "Overlooking the contrast ratio requirements for text over gradient or patterned backgrounds.",
                "Using low-contrast color combinations for text and background, such as light gray on white or dark gray on black.",
                "Applying transparency to text or background elements, reducing the effective contrast ratio below the required level.",
                "Not re-evaluating contrast ratios when updating or redesigning a website, leading to inadvertent accessibility issues."
            ]
        },
        {
            "name": "1.4.7 Low or No Background Audio",
            "level": "AAA",
            "description": "For prerecorded audio-only content that (1) contains primarily speech in the foreground, (2) is not an audio CAPTCHA or audio logo, and (3) is not vocalization intended to be primarily musical expression such as singing or rapping, at least one of the following is true:",
            "url": "https://www.w3.org/TR/WCAG22/#low-or-no-background-audio",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "at_least_one",
                    "title": "No Background",
                    "description": "The audio does not contain background sounds."
                },
                {
                    "type": "at_least_one",
                    "title": "Turn Off",
                    "description": "The background sounds can be turned off."
                },
                {
                    "type": "at_least_one",
                    "title": "20 dB",
                    "description": "The background sounds are at least 20 decibels lower than the foreground speech content, with the exception of occasional sounds that last for only one or two seconds."
                }
            ],
            "techniques": [
                "Ensure that any prerecorded audio content that primarily features speech does not include background sounds, or if present, can be turned off via a user control.",
                "Adjust audio mixing levels to ensure that any background sounds are at least 20 decibels lower than the speech content.",
                "Offer a version of the audio content without background sounds available as an alternative for users.",
                "Provide users with an option to adjust the volume levels separately for background and foreground audio within the application.",
                "Use audio editing tools to remove or significantly reduce background sounds in prerecorded audio content."
            ],
            "failures": [
                "Including background music or sounds in speech-heavy audio content without the option to turn it off.",
                "Mixing audio levels where background sounds are too close in volume to the foreground speech, making it difficult for users to hear the speech clearly.",
                "Failing to provide a background-free version of the audio content for users who need it.",
                "Not offering user controls or settings to adjust or disable background sounds in audio content."
            ]
        },
        {
            "name": "1.4.8 Visual Presentation",
            "level": "AAA",
            "description": "For the visual presentation of blocks of text, a mechanism is available to achieve the following:",
            "url": "https://www.w3.org/TR/WCAG22/#visual-presentation",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "Foreground and background colors can be selected by the user."
                },
                {
                    "type": "all_true",
                    "title": "Width is no more than 80 characters or glyphs (40 if CJK)."
                },
                {
                    "type": "all_true",
                    "title": "Text is not justified (aligned to both the left and the right margins)."
                },
                {
                    "type": "all_true",
                    "title": "Line spacing (leading) is at least space-and-a-half within paragraphs, and paragraph spacing is at least 1.5 times larger than the line spacing."
                },
                {
                    "type": "all_true",
                    "title": "Text can be resized without assistive technology up to 200 percent in a way that does not require the user to scroll horizontally to read a line of text on a full-screen window."
                }
            ],
            "techniques": [
                "Allow users to select and customize foreground and background colors through a settings panel or theme options.",
                "Limit the width of text blocks to a maximum of 80 characters or glyphs (or 40 for CJK text) using CSS properties like `max-width`.",
                "Align text to the left and ensure that it is not justified, maintaining a ragged right edge to improve readability.",
                "Set line spacing within paragraphs to at least 1.5 times the font size and ensure paragraph spacing is at least 1.5 times the line spacing using CSS properties like `line-height` and `margin`.",
                "Use responsive design techniques to allow text to be resized up to 200% without causing horizontal scrolling, such as using flexible layout grids and percentage-based widths."
            ],
            "failures": [
                "Restricting user ability to change text and background colors, thereby forcing a specific color scheme.",
                "Allowing text blocks to exceed 80 characters in width (or 40 for CJK), making it difficult for users to track lines.",
                "Justifying text, which can lead to uneven spacing between words and hinder readability.",
                "Providing insufficient line and paragraph spacing, which can cause text to appear cramped and hard to read.",
                "Designing a layout that forces horizontal scrolling when text is resized, making it difficult to read content continuously."
            ]
        },
        {
            "name": "1.4.9 Images of Text (No Exception)",
            "level": "AAA",
            "description": "Images of text are only used for pure decoration or where a particular presentation of text is essential to the information being conveyed.",
            "url": "https://www.w3.org/TR/WCAG22/#images-of-text-no-exception",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": null,
            "techniques": [
                "Use CSS to style text instead of embedding text within images, ensuring that the text is accessible and can be resized or adjusted by users.",
                "Implement web fonts to achieve desired text presentation rather than relying on images of text, allowing for better scaling and accessibility.",
                "Provide a text alternative for decorative images of text, such as using alt=\"\" to ensure screen readers skip them.",
                "Utilize SVGs for scalable text representations when a particular visual style is necessary, ensuring text remains accessible and scalable.",
                "Implement responsive design techniques to ensure text remains legible on various screen sizes without needing to resort to images of text."
            ],
            "failures": [
                "Using images to display text content without providing a text-based alternative or explanation.",
                "Embedding text within images for buttons or navigation elements, making it difficult for screen readers and assistive technologies to interpret.",
                "Relying on images of text for headings or important content, preventing users from adjusting font size or style according to their needs.",
                "Failing to update text content in images, leading to outdated information that cannot be easily changed or translated."
            ]
        },
        {
            "name": "1.4.10 Reflow",
            "level": "AA",
            "description": "Content can be presented without loss of information or functionality, and without requiring scrolling in two dimensions for:",
            "url": "https://www.w3.org/TR/WCAG22/#reflow",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "Vertical scrolling content at a width equivalent to 320 CSS pixels;"
                },
                {
                    "type": "all_true",
                    "title": "Horizontal scrolling content at a height equivalent to 256 CSS pixels."
                },
                {
                    "type": "exception",
                    "title": "Except for parts of the content which require two-dimensional layout for usage or meaning."
                }
            ],
            "techniques": [
                "Use responsive design principles to ensure content adapts to different screen sizes without requiring horizontal scrolling.",
                "Implement CSS media queries to adjust the layout for different viewport widths, such as 320 CSS pixels for small screens.",
                "Design flexible grid systems that allow content to reflow within smaller viewports without losing information or functionality.",
                "Use relative units like percentages or ems for defining layout dimensions instead of fixed units like pixels.",
                "Test web pages at different viewport sizes to ensure content reflows properly and remains accessible without two-dimensional scrolling."
            ],
            "failures": [
                "Designing fixed-width layouts that require horizontal scrolling on small screens.",
                "Using absolute positioning extensively, leading to content cut-off or overlap on smaller viewports.",
                "Not testing web applications on different devices and viewport sizes, resulting in inaccessible content.",
                "Over-relying on tables for layout purposes, which can prevent content from reflowing properly."
            ]
        },
        {
            "name": "1.4.11 Non-text Contrast",
            "level": "AA",
            "description": "The visual presentation of the following have a contrast ratio of at least 3:1 against adjacent color(s):",
            "url": "https://www.w3.org/TR/WCAG22/#non-text-contrast",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "User Interface Components",
                    "description": "Visual information required to identify user interface components and states, except for inactive components or where the appearance of the component is determined by the user agent and not modified by the author;"
                },
                {
                    "type": "all_true",
                    "title": "Graphical Objects",
                    "description": "Parts of graphics required to understand the content, except when a particular presentation of graphics is essential to the information being conveyed."
                }
            ],
            "techniques": [
                "Use high-contrast color combinations for buttons, links, and other interactive elements to ensure a minimum contrast ratio of 3:1.",
                "Design icons and graphical elements with sufficient contrast against their background to enhance visibility and recognition.",
                "Employ CSS to define border styles or add visual indicators (like shadows or outlines) that meet contrast requirements for interactive elements.",
                "Use tools or browser extensions to test and verify color contrast ratios in the design and development phases.",
                "Integrate user testing with individuals who have visual impairments to validate the effectiveness of contrast choices in real-world scenarios."
            ],
            "failures": [
                "Designing buttons or links with insufficient contrast between text or icon and its background.",
                "Creating charts or graphs with colors that are too similar, making it difficult to distinguish between different data points.",
                "Using light colors for text or icons on similarly light backgrounds without any additional contrast-enhancing elements.",
                "Over-relying on default browser styles that may not ensure adequate contrast for interactive elements.",
                "Neglecting to test contrast in various display settings, such as high-glare environments or when using screen filters."
            ]
        },
        {
            "name": "1.4.12 Text Spacing",
            "level": "AA",
            "description": "In content implemented using markup languages that support the following text style properties, no loss of content or functionality occurs by setting all of the following and by changing no other style property:",
            "url": "https://www.w3.org/TR/WCAG22/#text-spacing",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "Line height (line spacing) to at least 1.5 times the font size;"
                },
                {
                    "type": "all_true",
                    "title": "Spacing following paragraphs to at least 2 times the font size;"
                },
                {
                    "type": "all_true",
                    "title": "Letter spacing (tracking) to at least 0.12 times the font size;"
                },
                {
                    "type": "all_true",
                    "title": "Word spacing to at least 0.16 times the font size."
                },
                {
                    "type": "exception",
                    "title": "Exception: Human languages and scripts that do not make use of one or more of these text style properties in written text can conform using only the properties that exist for that combination of language and script."
                }
            ],
            "techniques": [
                "Use CSS to set `line-height` to at least 1.5 times the font size to ensure sufficient line spacing.",
                "Implement CSS styles to set `margin-bottom` or `padding-bottom` for paragraphs to at least 2 times the font size for adequate spacing.",
                "Apply CSS `letter-spacing` property to at least 0.12 times the font size to improve readability.",
                "Use CSS `word-spacing` property set to at least 0.16 times the font size to ensure sufficient space between words.",
                "Test text spacing adjustments using browser developer tools to verify no loss of content or functionality occurs.",
                "Provide user interface controls allowing users to adjust text spacing settings as needed."
            ],
            "failures": [
                "Fixing text spacing properties in a way that content becomes clipped or overlaps when user styles are applied.",
                "Using pixel values for text spacing properties that do not scale with the font size.",
                "Implementing absolute positioning that breaks with increased text spacing changes.",
                "Applying text spacing changes that result in hidden or cut-off content when zoomed or resized.",
                "Ignoring testing with assistive technologies to ensure no loss of content or functionality when text spacing is adjusted."
            ]
        },
        {
            "name": "1.4.13 Content on Hover or Focus",
            "level": "AA",
            "description": "Where receiving and then removing pointer hover or keyboard focus triggers additional content to become visible and then hidden, the following are true:",
            "url": "https://www.w3.org/TR/WCAG22/#content-on-hover-or-focus",
            "guideline_description": "Make it easier for users to see and hear content including separating foreground from background.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "Dismissable",
                    "description": "A mechanism is available to dismiss the additional content without moving pointer hover or keyboard focus, unless the additional content communicates an input error or does not obscure or replace other content;"
                },
                {
                    "type": "all_true",
                    "title": "Hoverable",
                    "description": "If pointer hover can trigger the additional content, then the pointer can be moved over the additional content without the additional content disappearing;"
                },
                {
                    "type": "all_true",
                    "title": "Persistent",
                    "description": "The additional content remains visible until the hover or focus trigger is removed, the user dismisses it, or its information is no longer valid."
                },
                {
                    "type": "exception",
                    "title": "Exception: The visual presentation of the additional content is controlled by the user agent and is not modified by the author."
                }
            ],
            "techniques": [
                "Implement a close button or mechanism to allow users to dismiss additional content without moving pointer hover or keyboard focus.",
                "Ensure that additional content triggered by hover can be hovered over itself without disappearing, allowing users to interact with it.",
                "Keep additional content visible until the user moves pointer hover or keyboard focus away from the trigger, dismisses it, or the content becomes irrelevant.",
                "Use CSS to control the styling and visibility of additional content, ensuring it remains accessible and does not obstruct essential information.",
                "Provide keyboard navigation support to ensure that users can access and dismiss additional content through keyboard inputs."
            ],
            "failures": [
                "Triggering content on hover that cannot be dismissed by the user, forcing them to move the pointer or focus away to remove it.",
                "Creating additional content that disappears if the user attempts to interact with it, preventing further interaction.",
                "Automatically hiding additional content after a set time without user input, which may not give users adequate time to read or interact with it.",
                "Designing additional content that covers essential information on the page, making it inaccessible.",
                "Relying solely on scripts or actions not supported by all user agents to control the visibility of additional content."
            ]
        },
        {
            "name": "2.1.1 Keyboard",
            "level": "A",
            "description": "All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user's movement and not just the endpoints.",
            "url": "https://www.w3.org/TR/WCAG22/#keyboard",
            "guideline_description": "Make all functionality available from a keyboard.",
            "special_cases": null,
            "techniques": [
                "Use semantic HTML elements like buttons, links, and form controls that are natively focusable and operable via keyboard.",
                "Implement tabindex to ensure a logical and intuitive tab order for keyboard navigation.",
                "Ensure that all interactive elements, such as custom widgets or components, are accessible via keyboard by using standard keyboard events like `keydown`, `keypress`, and `keyup`.",
                "Provide skip links to allow users to bypass repetitive content and navigate directly to main sections of the page.",
                "Utilize ARIA roles and properties, such as `role=\"button\"` and `aria-pressed`, to convey the state and functionality of custom interactive elements.",
                "Ensure modal dialogs can be opened and closed with keyboard actions and that focus is appropriately trapped within the dialog when it is active."
            ],
            "failures": [
                "Creating custom interactive elements (e.g., custom buttons or links) that are not focusable or operable via keyboard.",
                "Relying solely on mouse events, such as `onclick` or `onmouseover`, without providing equivalent keyboard event handlers.",
                "Removing the default outline or focus indicators without providing an accessible alternative to indicate keyboard focus.",
                "Designing complex interactions that require rapid or timed keyboard inputs without offering configurable timing options.",
                "Failing to maintain the logical order of keyboard navigation by incorrectly using the tabindex attribute, leading to a confusing user experience."
            ]
        },
        {
            "name": "2.1.2 No Keyboard Trap",
            "level": "A",
            "description": "If keyboard focus can be moved to a component of the page using a keyboard interface, then focus can be moved away from that component using only a keyboard interface, and, if it requires more than unmodified arrow or tab keys or other standard exit methods, the user is advised of the method for moving focus away.",
            "url": "https://www.w3.org/TR/WCAG22/#no-keyboard-trap",
            "guideline_description": "Make all functionality available from a keyboard.",
            "special_cases": null,
            "techniques": [
                "Ensure that all interactive elements can be navigated to and from using standard keyboard navigation methods such as the Tab key and Shift + Tab.",
                "Provide clear instructions within the application for any non-standard keyboard shortcuts needed to navigate away from a component.",
                "Use the `tabindex` attribute appropriately to ensure a logical and predictable tab order through interactive elements.",
                "Implement a mechanism to allow users to dismiss modal dialogs or pop-ups with keyboard shortcuts such as pressing the Escape key.",
                "Test keyboard navigation thoroughly to ensure that focus is not trapped within any component or element on the page."
            ],
            "failures": [
                "Creating custom keyboard navigation without providing instructions to users on how to exit focus from components.",
                "Designating interactive elements as focusable but failing to provide a means to navigate away from them using the keyboard.",
                "Implementing modal dialogs or pop-ups that cannot be closed or navigated away from using keyboard controls.",
                "Overusing or improperly configuring `tabindex` attributes, leading to a confusing or inaccessible tab order."
            ]
        },
        {
            "name": "2.1.3 Keyboard (No Exception)",
            "level": "AAA",
            "description": "All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes.",
            "url": "https://www.w3.org/TR/WCAG22/#keyboard-no-exception",
            "guideline_description": "Make all functionality available from a keyboard.",
            "special_cases": null,
            "techniques": [
                "Ensure all interactive elements (buttons, links, forms) are focusable and operable using the keyboard, typically via the `tab`, `enter`, and `space` keys.",
                "Use semantic HTML elements like `<button>` and `<a>` to ensure keyboard accessibility, as they are inherently focusable and operable via keyboard.",
                "Implement JavaScript event handlers for keyboard events, such as `keydown` or `keypress`, in addition to or instead of `onclick` for custom components.",
                "Provide a logical and intuitive tab order using the `tabindex` attribute only when necessary to complement the natural flow of the document.",
                "Use ARIA roles and properties judiciously to ensure custom widgets are accessible and operable via keyboard, ensuring that the ARIA roles do not interfere with native HTML behavior."
            ],
            "failures": [
                "Creating custom interactive elements (like buttons or links) without ensuring they are keyboard operable.",
                "Implementing functionality that requires specific timing of keystrokes, such as holding down keys for prolonged periods or sequences of quick keystrokes.",
                "Disabling the default keyboard interactions provided by browsers without providing alternative methods for keyboard operation.",
                "Relying solely on mouse events (like `onclick`) for interaction without providing equivalent keyboard event handlers."
            ]
        },
        {
            "name": "2.1.4 Character Key Shortcuts",
            "level": "A",
            "description": "If a keyboard shortcut is implemented in content using only letter (including upper- and lower-case letters), punctuation, number, or symbol characters, then at least one of the following is true:",
            "url": "https://www.w3.org/TR/WCAG22/#character-key-shortcuts",
            "guideline_description": "Make all functionality available from a keyboard.",
            "special_cases": [
                {
                    "type": "at_least_one",
                    "title": "Turn off",
                    "description": "A mechanism is available to turn the shortcut off;"
                },
                {
                    "type": "at_least_one",
                    "title": "Remap",
                    "description": "A mechanism is available to remap the shortcut to use one or more non-printable keyboard characters (e.g. Ctrl, Alt, etc);"
                },
                {
                    "type": "at_least_one",
                    "title": "Active only on focus",
                    "description": "The keyboard shortcut for a user interface component is only active when that component has focus."
                }
            ],
            "techniques": [
                "Provide a setting in the application to disable keyboard shortcuts for users who may not need them.",
                "Implement a configuration option allowing users to customize keyboard shortcuts, including using non-printable keys like Ctrl or Alt.",
                "Design shortcuts to activate only when the associated user interface component is focused, preventing accidental activation.",
                "Use modifier keys (e.g., Ctrl, Alt) in combination with letter keys to reduce the risk of conflicts with common typing tasks.",
                "Clearly document all available keyboard shortcuts and provide guidance on how to disable or modify them."
            ],
            "failures": [
                "Implementing single-letter keyboard shortcuts that are always active, leading to accidental activation.",
                "Failing to provide a mechanism to turn off or customize keyboard shortcuts.",
                "Designing shortcuts that interfere with users' ability to type text input freely.",
                "Assuming that all users are comfortable with predefined keyboard shortcuts without offering customization options.",
                "Not providing clear instructions on how to manage keyboard shortcuts within the application."
            ]
        },
        {
            "name": "2.2.1 Timing Adjustable",
            "level": "A",
            "description": "For each time limit that is set by the content, at least one of the following is true:",
            "url": "https://www.w3.org/TR/WCAG22/#timing-adjustable",
            "guideline_description": "Provide users enough time to read and use content.",
            "special_cases": [
                {
                    "type": "at_least_one",
                    "title": "Turn off",
                    "description": "The user is allowed to turn off the time limit before encountering it; or"
                },
                {
                    "type": "at_least_one",
                    "title": "Adjust",
                    "description": "The user is allowed to adjust the time limit before encountering it over a wide range that is at least ten times the length of the default setting; or"
                },
                {
                    "type": "at_least_one",
                    "title": "Extend",
                    "description": "The user is warned before time expires and given at least 20 seconds to extend the time limit with a simple action (for example, 'press the space bar'), and the user is allowed to extend the time limit at least ten times; or"
                },
                {
                    "type": "at_least_one",
                    "title": "Real-time Exception",
                    "description": "The time limit is a required part of a real-time event (for example, an auction), and no alternative to the time limit is possible; or"
                },
                {
                    "type": "at_least_one",
                    "title": "Essential Exception",
                    "description": "The time limit is essential and extending it would invalidate the activity; or"
                },
                {
                    "type": "at_least_one",
                    "title": "20 Hour Exception",
                    "description": "The time limit is longer than 20 hours."
                }
            ],
            "techniques": [
                "Provide a user setting to turn off all time limits within the application.",
                "Implement a feature allowing users to adjust time limits to a range that is at least ten times the default setting.",
                "Introduce a warning system that alerts users before a time limit expires, giving them at least 20 seconds to extend it with a simple action.",
                "Design the system to allow users to extend any time limit at least ten times if needed.",
                "Clearly identify and document any real-time or essential activities where time limits cannot be adjusted, and ensure that these are genuinely necessary as per the exceptions."
            ],
            "failures": [
                "Not allowing users the option to turn off or adjust time limits in non-essential scenarios.",
                "Failing to provide a mechanism for users to extend time limits when warnings are issued.",
                "Implementing time limits that expire without sufficient warning or without an option for extension.",
                "Applying strict time limits to activities where such constraints are not essential or can be adjusted without affecting functionality.",
                "Assuming that all users will complete tasks within the default time limit without offering flexibility."
            ]
        },
        {
            "name": "2.2.2 Pause, Stop, Hide",
            "level": "A",
            "description": "For moving, blinking, scrolling, or auto-updating information, all of the following are true:",
            "url": "https://www.w3.org/TR/WCAG22/#pause-stop-hide",
            "guideline_description": "Provide users enough time to read and use content.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "Moving, blinking, scrolling",
                    "description": "For any moving, blinking or scrolling information that (1) starts automatically, (2) lasts more than five seconds, and (3) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it unless the movement, blinking, or scrolling is part of an activity where it is essential; and"
                },
                {
                    "type": "all_true",
                    "title": "Auto-updating",
                    "description": "For any auto-updating information that (1) starts automatically and (2) is presented in parallel with other content, there is a mechanism for the user to pause, stop, or hide it or to control the frequency of the update unless the auto-updating is part of an activity where it is essential."
                }
            ],
            "techniques": [
                "Provide a pause, stop, or hide button for carousels or sliders that move automatically.",
                "Implement a mechanism to pause or stop auto-scrolling content, such as news tickers.",
                "Use JavaScript to allow users to control the frequency of updates for live content feeds.",
                "Ensure that any animated content includes controls for pausing or stopping the animation.",
                "Provide a mechanism to pause or stop auto-updating notifications or alerts."
            ],
            "failures": [
                "Implementing auto-playing videos or animations without a pause or stop control.",
                "Having a carousel that moves automatically without a mechanism to stop or pause it.",
                "Auto-updating content, such as live scores, without allowing users to control the update frequency.",
                "Using infinite scrolling without a way to stop the loading of additional content."
            ]
        },
        {
            "name": "2.2.3 No Timing",
            "level": "AAA",
            "description": "Timing is not an essential part of the event or activity presented by the content, except for non-interactive synchronized media and real-time events.",
            "url": "https://www.w3.org/TR/WCAG22/#no-timing",
            "guideline_description": "Provide users enough time to read and use content.",
            "special_cases": null,
            "techniques": [
                "Design web content and activities without time restrictions, allowing users to proceed at their own pace.",
                "Implement a mechanism that allows users to extend time limits if they are part of the application, such as through a \"Need more time?\" button.",
                "Offer options to disable any time-based functionality, like auto-playing carousels or slideshows, allowing users to manually control the progression.",
                "If time is necessary for functionality, provide a configurable time extension or a way for users to request more time multiple times.",
                "Use asynchronous loading patterns to ensure content is accessible without requiring time-sensitive actions, such as auto-refreshing pages."
            ],
            "failures": [
                "Implementing auto-logout features without warning or without the ability to extend the session.",
                "Designing quizzes or tests with strict time limits that cannot be adjusted or extended.",
                "Using countdown timers that automatically submit forms or data without user control or intervention.",
                "Creating interactive content that automatically advances without providing a pause or stop option.",
                "Requiring users to respond or interact within a set timeframe to proceed within an application without offering extensions."
            ]
        },
        {
            "name": "2.2.4 Interruptions",
            "level": "AAA",
            "description": "Interruptions can be postponed or suppressed by the user, except interruptions involving an emergency.",
            "url": "https://www.w3.org/TR/WCAG22/#interruptions",
            "guideline_description": "Provide users enough time to read and use content.",
            "special_cases": null,
            "techniques": [
                "Offer a \"Do Not Disturb\" mode or setting that allows users to suppress non-emergency notifications and alerts.",
                "Implement user-controlled settings to manage the frequency and type of notifications they receive.",
                "Provide options for users to postpone interruptions, such as snooze buttons for notifications or alerts, with customizable time frames.",
                "Use system-level settings or APIs that respect user preferences for quiet hours or notification settings.",
                "Clearly differentiate emergency alerts from non-emergency interruptions, ensuring that only critical notifications bypass suppression settings."
            ],
            "failures": [
                "Automatically displaying pop-ups or notifications without giving users the option to suppress them.",
                "Interrupting users with non-critical updates or alerts that cannot be postponed or dismissed.",
                "Failing to provide clear settings or controls for managing interruptions.",
                "Not distinguishing between emergency and non-emergency notifications, leading to all interruptions being treated equally."
            ]
        },
        {
            "name": "2.2.5 Re-authenticating",
            "level": "AAA",
            "description": "When an authenticated session expires, the user can continue the activity without loss of data after re-authenticating.",
            "url": "https://www.w3.org/TR/WCAG22/#re-authenticating",
            "guideline_description": "Provide users enough time to read and use content.",
            "special_cases": null,
            "techniques": [
                "Implement session management that saves user data temporarily on the server or client side, allowing users to pick up where they left off after re-authentication.",
                "Provide clear and accessible notifications to users when their session is about to expire, allowing them to extend their session proactively.",
                "Offer a \"Remember Me\" option to reduce the frequency of re-authentication required, without compromising security.",
                "Use cookies or local storage to retain unsaved user inputs temporarily, which can be restored after re-authentication.",
                "Design a seamless re-authentication process that maintains the user's context, such as returning them to the same page or form state after logging back in."
            ],
            "failures": [
                "Automatically logging users out without warning or an option to extend the session, leading to data loss.",
                "Requiring users to re-enter all information after re-authenticating, resulting in frustration and inefficiency.",
                "Failing to save user progress or data temporarily, causing loss of work upon session expiration.",
                "Not informing users about session expiration, leaving them unaware and prone to losing their data."
            ]
        },
        {
            "name": "2.2.6 Timeouts",
            "level": "AAA",
            "description": "Users are warned of the duration of any user inactivity that could cause data loss, unless the data is preserved for more than 20 hours when the user does not take any actions.",
            "url": "https://www.w3.org/TR/WCAG22/#timeouts",
            "guideline_description": "Provide users enough time to read and use content.",
            "special_cases": null,
            "techniques": [
                "Implement a warning message that alerts users before a session timeout occurs due to inactivity, allowing them to extend the session if needed.",
                "Display a countdown timer indicating how much time is left before the session expires, and provide an option to reset the timer.",
                "Preserve user data automatically in the background so that users can resume their tasks without data loss after re-authentication or session restart.",
                "Allow users to configure or customize session timeout settings according to their preferences or needs.",
                "Use server-side solutions to maintain user data securely for at least 20 hours, ensuring it can be restored after session expiration."
            ],
            "failures": [
                "Failing to notify users before their session expires, resulting in unexpected data loss.",
                "Automatically logging users out without preserving their data when a timeout occurs.",
                "Displaying a timeout warning that is not accessible to screen reader users, such as using visual-only cues without an accessible alert.",
                "Implementing session timeouts that cannot be extended, leaving users unable to complete their tasks."
            ]
        },
        {
            "name": "2.3.1 Three Flashes or Below Threshold",
            "level": "A",
            "description": "Web pages do not contain anything that flashes more than three times in any one second period, or the flash is below the general flash and red flash thresholds.",
            "url": "https://www.w3.org/TR/WCAG22/#three-flashes-or-below-threshold",
            "guideline_description": "Do not design content in a way that is known to cause seizures.",
            "special_cases": null,
            "techniques": [
                "Avoid using animated GIFs or video content that flashes more than three times per second.",
                "Implement software checks to automatically detect and limit flashing content to three flashes per second or less.",
                "Use CSS animations carefully, ensuring any rapid changes in content do not exceed three flashes per second.",
                "Utilize tools like the Photosensitive Epilepsy Analysis Tool (PEAT) to evaluate and ensure content meets flash threshold requirements.",
                "Design animations with gradual transitions instead of abrupt flashes to reduce the risk of causing seizures."
            ],
            "failures": [
                "Including video content with rapid flashing scenes without editing them to reduce the flash rate.",
                "Using JavaScript or CSS to create animations that flash more than three times per second.",
                "Embedding third-party content, such as advertisements, that may contain flashing elements without verifying their compliance.",
                "Overlooking the need to test and evaluate existing content for flashing violations after updates or design changes."
            ]
        },
        {
            "name": "2.3.2 Three Flashes",
            "level": "AAA",
            "description": "Web pages do not contain anything that flashes more than three times in any one second period.",
            "url": "https://www.w3.org/TR/WCAG22/#three-flashes",
            "guideline_description": "Do not design content in a way that is known to cause seizures.",
            "special_cases": null,
            "techniques": [
                "Conduct a flash analysis of web content to identify any elements that may flash more than three times per second and adjust them accordingly.",
                "Use CSS animations or transitions with a duration that inherently limits the frequency of flashes to less than three per second.",
                "Implement controls that allow users to pause or stop any flashing content, ensuring they have control over such animations.",
                "Test content on a variety of devices and screen sizes to ensure that scaling does not inadvertently increase flash rates above the threshold.",
                "Utilize tools and software designed to detect flash hazards in digital content, ensuring compliance with the flash rate criterion."
            ],
            "failures": [
                "Including animated GIFs or videos that flash rapidly without assessing their flash frequency.",
                "Designing web content with interactive elements that flash quickly in response to user actions without controls to limit the flash rate.",
                "Failing to test content for flashing effects that may be triggered by browser or device-specific rendering issues.",
                "Relying solely on visual checks to evaluate flash frequency, which may overlook rapid flashes not easily perceivable by the human eye."
            ]
        },
        {
            "name": "2.3.3 Animation from Interactions",
            "level": "AAA",
            "description": "Motion animation triggered by interaction can be disabled, unless the animation is essential to the functionality or the information being conveyed.",
            "url": "https://www.w3.org/TR/WCAG22/#animation-from-interactions",
            "guideline_description": "Do not design content in a way that is known to cause seizures.",
            "special_cases": null,
            "techniques": [
                "Provide a setting or toggle within the application settings to disable motion animations triggered by user interactions.",
                "Use CSS media queries like `prefers-reduced-motion` to automatically reduce or eliminate animations for users who have enabled this preference in their operating system.",
                "Offer non-animated alternatives or static content in place of motion-based interactions when disabling animations.",
                "Limit the use of motion animations to those that are crucial for understanding and interaction, and ensure they are as subtle as possible.",
                "Implement a user preference cookie or local storage solution to remember a user's choice to disable animations across sessions."
            ],
            "failures": [
                "Automatically triggering animations without providing an option to disable them.",
                "Ignoring user preferences set in the operating system or browser regarding reduced motion.",
                "Using animations or motion effects as the only means to communicate critical information without providing alternative methods.",
                "Relying on complex or excessive animations that could potentially cause discomfort or confusion for users sensitive to motion."
            ]
        },
        {
            "name": "2.4.1 Bypass Blocks",
            "level": "A",
            "description": "A mechanism is available to bypass blocks of content that are repeated on multiple Web pages.",
            "url": "https://www.w3.org/TR/WCAG22/#bypass-blocks",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Implement \"Skip to Main Content\" links at the top of web pages to allow users to bypass repetitive navigation menus.",
                "Use landmark roles (e.g., `<header>`, `<nav>`, `<main>`, `<footer>`) to define sections of a page, aiding assistive technologies in jumping to specific content areas.",
                "Ensure headings are used consistently and hierarchically to structure content, allowing users to navigate through the document outline.",
                "Provide a site map or table of contents to help users locate specific sections of the web application efficiently.",
                "Use ARIA landmarks or roles (e.g., `role=\"navigation\"`, `role=\"main\"`) to explicitly identify significant regions of the page for screen readers."
            ],
            "failures": [
                "Omitting skip links or not making them visually apparent and accessible by keyboard.",
                "Structuring the page using only `<div>` and `<span>` elements without semantic meaning, making it difficult for assistive technologies to identify sections of the page.",
                "Having navigation menus that do not allow users to bypass them using keyboard shortcuts or other mechanisms.",
                "Failing to implement or incorrectly implementing ARIA roles, which can confuse or mislead users relying on assistive technologies.",
                "Placing skip links or navigation aids in a way that makes them unreachable by keyboard users, such as requiring a mouse hover to reveal them."
            ]
        },
        {
            "name": "2.4.2 Page Titled",
            "level": "A",
            "description": "Web pages have titles that describe topic or purpose.",
            "url": "https://www.w3.org/TR/WCAG22/#page-titled",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Use descriptive and unique titles for each page that accurately reflect its content or purpose.",
                "Place the title element within the head section of the HTML document to ensure it is recognized by browsers and assistive technologies.",
                "Keep page titles concise, ideally under 60 characters, to ensure they are fully visible in browser tabs and search engine results.",
                "Include the website or organization name in the title for brand recognition, especially on pages that are not the homepage.",
                "Use a consistent format for page titles across the website to help users understand they are within the same site."
            ],
            "failures": [
                "Using the same generic title such as \"Untitled\" or \"New Page\" for multiple pages.",
                "Omitting the title element entirely from the HTML document.",
                "Using titles that are overly vague or do not provide a clear idea of the page\u2019s content, such as just \"Page 1\" or \"Information\".",
                "Implementing titles that are excessively long, causing important information to be truncated in browser tabs and search results.",
                "Failing to update the title when significant changes are made to a page's content, leading to outdated or misleading titles."
            ]
        },
        {
            "name": "2.4.3 Focus Order",
            "level": "A",
            "description": "If a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability.",
            "url": "https://www.w3.org/TR/WCAG22/#focus-order",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Use the tabindex attribute wisely to create a logical tab order that follows the visual sequence of the page.",
                "Ensure that interactive elements (buttons, links, form fields) are focusable in a logical order that matches the content flow.",
                "Group related form fields with fieldset and legend elements to maintain logical focus order within forms.",
                "Use skip links to allow users to bypass repetitive content and navigate to the main content directly.",
                "Implement ARIA landmarks (e.g., role=\"navigation\", role=\"main\") to define key areas of your page for better navigation."
            ],
            "failures": [
                "Placing focusable elements in a random or non-linear order that does not match the content sequence.",
                "Using CSS to change the visual order of elements without adjusting the DOM order, leading to a confusing focus sequence.",
                "Failing to update tabindex when dynamically adding or removing elements, resulting in a disrupted focus order.",
                "Overusing negative tabindex values, causing elements to be unreachable via keyboard navigation."
            ]
        },
        {
            "name": "2.4.4 Link Purpose (In Context)",
            "level": "A",
            "description": "The purpose of each link can be determined from the link text alone or from the link text together with its programmatically determined link context, except where the purpose of the link would be ambiguous to users in general.",
            "url": "https://www.w3.org/TR/WCAG22/#link-purpose-in-context",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Use descriptive link text that clearly indicates the destination or function of the link.",
                "Provide additional context for links using surrounding text or headings to clarify the purpose if the link text alone is not sufficient.",
                "Utilize ARIA attributes such as `aria-label` or `aria-labelledby` to add context to links that may have ambiguous text.",
                "Ensure that link text changes contextually to reflect its purpose or destination, especially if the link appears in different sections of the site.",
                "Implement breadcrumb navigation to provide contextual information about the link's destination within the site hierarchy."
            ],
            "failures": [
                "Using generic link text such as \"click here,\" \"read more,\" or \"link\" without providing additional context.",
                "Relying solely on tooltips or hover effects to convey the purpose of a link, as these are not accessible to all users.",
                "Embedding links within images without providing adequate alt text that conveys the link's purpose.",
                "Using the same link text for different destinations or actions, causing confusion about the link's purpose."
            ]
        },
        {
            "name": "2.4.5 Multiple Ways",
            "level": "AA",
            "description": "More than one way is available to locate a Web page within a set of Web pages except where the Web Page is the result of, or a step in, a process.",
            "url": "https://www.w3.org/TR/WCAG22/#link-purpose-in-context",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Provide a search function that allows users to search for specific content within the website.",
                "Implement a sitemap that outlines the structure of the website and links to all available pages.",
                "Utilize consistent and descriptive navigation menus that are available on every page.",
                "Include a breadcrumb trail on pages to show users their current location within the site's hierarchy.",
                "Offer a table of contents on longer pages to help users quickly navigate to different sections."
            ],
            "failures": [
                "Relying solely on a single navigation method, such as a top menu, without providing alternatives like a search function or sitemap.",
                "Not including a consistent navigation structure across pages, which can confuse users and make it difficult to find content.",
                "Failing to update the sitemap when new pages are added or existing pages are removed, leading to outdated navigation information."
            ]
        },
        {
            "name": "2.4.6 Headings and Labels",
            "level": "AA",
            "description": "Headings and labels describe topic or purpose.",
            "url": "https://www.w3.org/TR/WCAG22/#headings-and-labels",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Use semantic HTML elements like `<h1>`, `<h2>`, etc., for headings to convey the structure of the content.",
                "Ensure that headings are used in a hierarchical order without skipping levels (e.g., do not go from `<h1>` to `<h3>` without an intervening `<h2>`).",
                "Write descriptive headings and labels that clearly convey the topic or purpose of the content they introduce.",
                "Use ARIA attributes, such as `aria-labelledby`, to provide accessible names for form controls when a visible label is not present.",
                "Regularly test headings and labels with screen readers to ensure they are understandable and provide the intended context."
            ],
            "failures": [
                "Using non-descriptive or generic headings and labels, such as \"Click Here\" or \"More Info,\" that do not convey specific information about the content or purpose.",
                "Omitting necessary headings or labels, leading to confusing or ambiguous navigation or content structure.",
                "Structuring content visually to appear as headings without using semantic heading elements, causing issues for screen reader users.",
                "Inconsistently applying labels for form inputs, which can confuse users about the input's purpose or required information."
            ]
        },
        {
            "name": "2.4.7 Focus Visible",
            "level": "AA",
            "description": "Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.",
            "url": "https://www.w3.org/TR/WCAG22/#focus-visible",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Use CSS to style focus indicators with clear visual cues like borders or background color changes (e.g., `:focus { outline: 2px solid #000; }`).",
                "Ensure focus indicators are sufficiently contrasting against the background to be easily noticeable.",
                "Test the application with only a keyboard to ensure all interactive elements are focusable and the focus indicator is visible.",
                "Use browser default focus styles as a baseline and enhance them for better visibility and consistency across different elements.",
                "Provide a consistent focus indicator style across all interactive elements to avoid user confusion."
            ],
            "failures": [
                "Removing focus outlines without providing an alternative visible indicator.",
                "Using low-contrast focus indicators that blend into the background, making them difficult to see.",
                "Failing to implement focus indicators on custom interactive elements, such as buttons or links created with `div` or `span` tags.",
                "Overlapping elements or CSS effects that obscure the focus indicator, making it difficult to determine which element is focused."
            ]
        },
        {
            "name": "2.4.8 Location",
            "level": "AAA",
            "description": "Information about the user's location within a set of Web pages is available.",
            "url": "https://www.w3.org/TR/WCAG22/#location",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Use breadcrumb navigation to display the user's current location within the website hierarchy.",
                "Implement a clear and consistent page title format that reflects the page's position in the site structure.",
                "Include a site map or table of contents that outlines the structure and available pages of the website.",
                "Use \"you are here\" indicators in navigation menus to highlight the current page or section.",
                "Provide a \"back to top\" link or button for long pages to help users easily navigate back to the main navigation."
            ],
            "failures": [
                "Failing to update the breadcrumb trail dynamically as users navigate through the site.",
                "Using vague or generic page titles that do not indicate the page's position within the site.",
                "Relying solely on URL structure to communicate location without visible indicators on the page.",
                "Omitting navigation aids like breadcrumbs, especially on complex or content-heavy sites."
            ]
        },
        {
            "name": "2.4.9 Link Purpose (Link Only)",
            "level": "AAA",
            "description": "A mechanism is available to allow the purpose of each link to be identified from link text alone, except where the purpose of the link would be ambiguous to users in general.",
            "url": "https://www.w3.org/TR/WCAG22/#link-purpose-link-only",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Use descriptive link text that clearly indicates the purpose or destination of the link.",
                "Ensure that link text is unique and distinguishable from other links on the page.",
                "Avoid using generic phrases like \"click here\" or \"read more\" as standalone link text.",
                "Provide context within the link text itself if the link is part of a list or series of similar links (e.g., \"Read more about climate change\").",
                "Use accessible tooltips or additional text that becomes visible on focus to provide more context where necessary."
            ],
            "failures": [
                "Using identical link text for different destinations, leading to confusion.",
                "Relying on surrounding text to provide context, making standalone link text ambiguous.",
                "Creating links with text that does not accurately represent the destination or purpose.",
                "Using images or icons as links without accompanying descriptive text for the link's purpose."
            ]
        },
        {
            "name": "2.4.10 Section Headings",
            "level": "AAA",
            "description": "Section headings are used to organize the content.",
            "url": "https://www.w3.org/TR/WCAG22/#section-headings",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Use semantic HTML elements like `<h1>`, `<h2>`, `<h3>`, etc., to create a clear and logical heading hierarchy.",
                "Ensure that headings accurately describe the content of the sections they represent.",
                "Use CSS to style headings for visual differentiation while maintaining semantic structure.",
                "Implement ARIA landmarks (e.g., `role=\"heading\"` with `aria-level` attributes) when native HTML headings are not feasible.",
                "Consistently apply heading levels across similar sections to maintain a predictable structure."
            ],
            "failures": [
                "Skipping heading levels (e.g., jumping from `<h1>` to `<h3>` without an `<h2>`).",
                "Using headings purely for visual effect without considering their semantic meaning.",
                "Failing to provide headings for sections of content, leading to a disorganized structure.",
                "Overusing generic headings like \"Section 1\", \"Section 2\" without descriptive context."
            ]
        },
        {
            "name": "2.4.11 Focus Not Obscured (Minimum)",
            "level": "AA",
            "description": "When a user interface component receives keyboard focus, the component is not entirely hidden due to author-created content.",
            "url": "https://www.w3.org/TR/WCAG22/#focus-not-obscured-minimum",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Ensure that focus styles are clearly visible by using CSS properties such as `outline`, `box-shadow`, or `border` to indicate focus.",
                "Implement JavaScript logic to automatically scroll focused elements into view if they are initially obscured by other content.",
                "Use CSS `z-index` to ensure that focused elements are not covered by other overlapping elements, such as sticky headers or footers.",
                "Design user interface layouts to minimize the chance of focusable elements being obscured by ensuring adequate spacing and avoiding fixed-position elements that cover content.",
                "Employ media queries to adjust layouts on smaller screens, ensuring that focusable elements remain visible and not obscured by other UI components."
            ],
            "failures": [
                "Failing to provide a visible focus indicator that distinguishes focused elements from the rest of the content.",
                "Designing interface components such that when focused, they are entirely or partially obscured by other elements like pop-ups or fixed headers.",
                "Overlapping elements with a higher `z-index` that cover focusable components, preventing users from seeing where the focus is.",
                "Using custom CSS resets that inadvertently remove default focus styles without ensuring a replacement that maintains focus visibility."
            ]
        },
        {
            "name": "2.4.12 Focus Not Obscured (Enhanced)",
            "level": "AAA",
            "description": "When a user interface component receives keyboard focus, no part of the component is hidden by author-created content.",
            "url": "https://www.w3.org/TR/WCAG22/#focus-not-obscured-enhanced",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": null,
            "techniques": [
                "Ensure focus styles are clearly visible and not obscured by any overlapping content, using CSS properties like `outline` or `border` to define focus indicators.",
                "Implement JavaScript logic to adjust scrolling or reposition elements to ensure the focused component is fully visible when it receives focus.",
                "Use CSS `z-index` to manage stacking order and prevent focus indicators from being hidden behind other elements.",
                "Design layouts that avoid fixed elements overlapping areas where focusable components might appear, especially in responsive designs.",
                "Test focus management with a variety of screen sizes and orientations to ensure that content remains unobscured across different devices."
            ],
            "failures": [
                "Allowing fixed headers or footers to cover the focused element when navigating through content with the keyboard.",
                "Using modals or pop-ups that obscure the focused element without repositioning the focus or the obscuring element.",
                "Implementing custom focus styles that are too subtle or blend into the background, making them effectively hidden.",
                "Failing to update content layout dynamically when the viewport changes, leading to focusable elements being obscured by other content."
            ]
        },
        {
            "name": "2.4.13 Focus Appearance",
            "level": "AAA",
            "description": "When the keyboard focus indicator is visible, an area of the focus indicator meets all the following:",
            "url": "https://www.w3.org/TR/WCAG22/#focus-appearance",
            "guideline_description": "Provide ways to help users navigate, find content, and determine where they are.",
            "special_cases": [
                {
                    "type": "all_true",
                    "title": "is at least as large as the area of a 2 CSS pixel thick perimeter of the unfocused component or sub-component, and"
                },
                {
                    "type": "all_true",
                    "title": "has a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states."
                },
                {
                    "type": "exception",
                    "title": "The focus indicator is determined by the user agent and cannot be adjusted by the author, or"
                },
                {
                    "type": "exception",
                    "title": "The focus indicator and the indicator\u2019s background color are not modified by the author."
                }
            ],
            "techniques": [
                "Ensure the focus indicator has a thickness of at least 2 CSS pixels around the perimeter of the focused component.",
                "Use CSS to style focus indicators with a contrast ratio of at least 3:1 against the component's unfocused state.",
                "Implement custom focus styles using the `:focus` pseudo-class to enhance visibility.",
                "Test focus indicators across multiple browsers to confirm consistent appearance and functionality.",
                "Provide additional visual cues, such as border or background changes, to emphasize focus state changes beyond default outlines."
            ],
            "failures": [
                "Designing focus indicators with insufficient contrast, making them difficult to discern.",
                "Using focus indicators that are too thin, failing to meet the 2 CSS pixel requirement.",
                "Relying solely on browser default focus styles without testing for adequate visibility.",
                "Removing focus outlines without providing a suitable alternative to indicate focus.",
                "Overriding user agent focus styles without ensuring accessibility requirements are met."
            ]
        },
        {
            "name": "2.5.1 Pointer Gestures",
            "level": "A",
            "description": "All functionality that uses multipoint or path-based gestures for operation can be operated with a single pointer without a path-based gesture, unless a multipoint or path-based gesture is essential.",
            "url": "https://www.w3.org/TR/WCAG22/#pointer-gestures",
            "guideline_description": "Make it easier for users to operate functionality through various inputs beyond keyboard.",
            "special_cases": null,
            "techniques": [
                "Implement single-tap alternatives for complex gestures like pinch-to-zoom or swipe.",
                "Use on-screen buttons or controls that can be activated with a single pointer click or tap.",
                "Provide alternative methods such as a context menu or a button to achieve the same result as a path-based gesture.",
                "Ensure that dragging actions, such as drag-and-drop, can be accomplished using simple click-and-select methods.",
                "Use device-independent event handlers that respond to single pointer inputs, like `onclick` or `ontap`, for all interactive elements."
            ],
            "failures": [
                "Designing interfaces where functionality relies solely on gestures like swiping or pinching without alternatives.",
                "Requiring users to perform complex gestures, such as drawing a specific shape, without an option for a single pointer action.",
                "Implementing interactive elements where the outcome depends on the speed or direction of a swipe without providing an alternative.",
                "Not providing any fallback for users who cannot perform multi-touch gestures, assuming all users have the same dexterity."
            ]
        },
        {
            "name": "2.5.2 Pointer Cancellation",
            "level": "A",
            "description": "For functionality that can be operated using a single pointer, at least one of the following is true:",
            "url": "https://www.w3.org/TR/WCAG22/#pointer-cancellation",
            "guideline_description": "Make it easier for users to operate functionality through various inputs beyond keyboard.",
            "special_cases": [
                {
                    "type": "at_least_one",
                    "title": "No Down-Event",
                    "description": "The down-event of the pointer is not used to execute any part of the function;"
                },
                {
                    "type": "at_least_one",
                    "title": "Abort or Undo",
                    "description": "Completion of the function is on the up-event, and a mechanism is available to abort the function before completion or to undo the function after completion;"
                },
                {
                    "type": "at_least_one",
                    "title": "Up Reversal",
                    "description": "The up-event reverses any outcome of the preceding down-event;"
                },
                {
                    "type": "at_least_one",
                    "title": "Essential",
                    "description": "Completing the function on the down-event is essential."
                }
            ],
            "techniques": [
                "Implement functions to trigger actions on the up-event rather than the down-event, ensuring users have time to cancel.",
                "Provide an 'Undo' button or option immediately after an action is completed, allowing users to reverse unintended actions.",
                "Add a confirmation dialog before completing an action initiated by a pointer event, giving users a chance to abort.",
                "Design interactive elements to require a secondary action (e.g., a double-tap or long press) to confirm execution, reducing accidental activations.",
                "Use touch gesture libraries that allow for customized event handling, providing flexibility in implementing up-event triggers."
            ],
            "failures": [
                "Triggering actions immediately on the down-event without allowing users an option to cancel or confirm the action.",
                "Not providing a method to undo actions once they are completed, leaving users stuck with unwanted outcomes.",
                "Designing interfaces where actions cannot be reversed, such as deleting items permanently without confirmation or undo options.",
                "Relying on immediate execution of functions without considering the possibility of accidental touches, especially on touch screens.",
                "Implementing critical actions with single-tap gestures without any additional verification step or option to cancel."
            ]
        },
        {
            "name": "2.5.3 Label in Name",
            "level": "A",
            "description": "For user interface components with labels that include text or images of text, the name contains the text that is presented visually.",
            "url": "https://www.w3.org/TR/WCAG22/#label-in-name",
            "guideline_description": "Make it easier for users to operate functionality through various inputs beyond keyboard.",
            "special_cases": null,
            "techniques": [
                "Ensure the visible text label matches the accessible name by using the `aria-label` or `aria-labelledby` attributes to include the visual label text.",
                "Use HTML `label` elements that are explicitly associated with form fields using the `for` attribute, and ensure the `for` attribute value matches the `id` of the form field.",
                "When using buttons or links with text, ensure the `innerText` or `textContent` matches the accessible name used by screen readers.",
                "For image-based labels, use `alt` attributes that contain the same text as the image to ensure consistency between visual and screen reader text.",
                "Implement voice command support by ensuring the visible label matches the programmatic label, so voice recognition software can identify and interact with elements accurately."
            ],
            "failures": [
                "Using an `aria-label` that does not match the visible text on a button or control.",
                "Providing a label for a form field that is visually different from the label exposed to assistive technologies.",
                "Using images with text as labels without providing matching `alt` text that corresponds to the visible text.",
                "Dynamically updating the visible label text without updating the accessible name, leading to a mismatch.",
                "Relying on placeholder text as a label for input fields, which may not be programmatically associated with the input."
            ]
        },
        {
            "name": "2.5.4 Motion Actuation",
            "level": "A",
            "description": "Functionality that can be operated by device motion or user motion can also be operated by user interface components and responding to the motion can be disabled to prevent accidental actuation, except when:",
            "url": "https://www.w3.org/TR/WCAG22/#motion-actuation",
            "guideline_description": "Make it easier for users to operate functionality through various inputs beyond keyboard.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Supported Interface",
                    "description": "The motion is used to operate functionality through an accessibility supported interface;"
                },
                {
                    "type": "exception",
                    "title": "Essential",
                    "description": "The motion is essential for the function and doing so would invalidate the activity."
                }
            ],
            "techniques": [
                "Provide an alternative user interface component, such as a button or toggle, to perform actions that can be triggered by device motion.",
                "Implement settings that allow users to disable motion-activated functions, providing a way to prevent accidental activation.",
                "Use device motion events judiciously and ensure they are not the sole method of interaction for critical functionalities.",
                "Offer clear instructions and visual cues for any motion-based interactions available, ensuring users are aware of alternative methods.",
                "Utilize accessibility APIs to ensure that motion-based interactions are supported through accessible interfaces when necessary."
            ],
            "failures": [
                "Relying solely on device shaking to refresh or perform an action without an alternative method.",
                "Not providing an option to disable motion-driven interactions, leading to accidental triggers.",
                "Designing functions that depend entirely on motion for navigation or control, excluding users who cannot perform such actions.",
                "Failing to inform users about available motion-based controls and their alternatives within the interface."
            ]
        },
        {
            "name": "2.5.5 Target Size",
            "level": "AAA",
            "description": "The size of the target for pointer inputs is at least 44 by 44 CSS pixels except when:",
            "url": "https://www.w3.org/TR/WCAG22/#target-size",
            "guideline_description": "Make it easier for users to operate functionality through various inputs beyond keyboard.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Equivalent",
                    "description": "The target is available through an equivalent link or control on the same page that is at least 44 by 44 CSS pixels;"
                },
                {
                    "type": "exception",
                    "title": "Inline",
                    "description": "The target is in a sentence or block of text;"
                },
                {
                    "type": "exception",
                    "title": "User Agent Control",
                    "description": "The size of the target is determined by the user agent and is not modified by the author;"
                },
                {
                    "type": "exception",
                    "title": "Essential",
                    "description": "A particular presentation of the target is essential to the information being conveyed."
                }
            ],
            "techniques": [
                "Design clickable buttons and links with a minimum target size of 44 by 44 CSS pixels to accommodate all users.",
                "Use padding to increase the size of smaller interactive elements without affecting their visual design.",
                "Group related links or buttons into larger touch areas to meet the target size requirement.",
                "Ensure that touch targets have sufficient spacing between them to prevent accidental activation of adjacent targets.",
                "Implement responsive design techniques to maintain target size and spacing across different screen sizes and resolutions."
            ],
            "failures": [
                "Designing interactive elements like buttons or links with a target size smaller than 44 by 44 CSS pixels without qualifying for an exception.",
                "Placing interactive elements too close together, making them difficult to activate individually.",
                "Ignoring the need for larger target sizes on touch interfaces, such as mobile devices and tablets.",
                "Over-relying on exceptions, such as placing targets in text, without considering alternative designs that could meet the target size criterion.",
                "Modifying user agent controls that result in reducing the target size below the required minimum."
            ]
        },
        {
            "name": "2.5.6 Concurrent Input Mechanisms",
            "level": "AAA",
            "description": "Web content does not restrict use of input modalities available on a platform except where the restriction is essential, required to ensure the security of the content, or required to respect user settings.",
            "url": "https://www.w3.org/TR/WCAG22/#concurrent-input-mechanisms",
            "guideline_description": "Make it easier for users to operate functionality through various inputs beyond keyboard.",
            "special_cases": null,
            "techniques": [
                "Allow users to interact with web content using multiple input devices like mouse, keyboard, touch, and voice commands.",
                "Implement pointer and gesture events along with keyboard events to ensure functionality is accessible via touch and keyboard.",
                "Utilize platform-specific APIs to detect available input modalities and adapt content interaction accordingly.",
                "Ensure that touch targets are large enough for users to interact with them easily on touch devices.",
                "Provide configurable shortcuts that can be activated using different input methods, such as keyboard commands, voice activation, or touch gestures."
            ],
            "failures": [
                "Restricting functionality to a single input method, such as requiring a mouse click when keyboard input could be used.",
                "Disabling touch interactions on devices that support touch input without providing alternative input options.",
                "Blocking speech recognition or voice control features that could otherwise be used to interact with the content.",
                "Implementing custom controls that do not respond to all input modalities available on the platform, such as only supporting mouse clicks."
            ]
        },
        {
            "name": "2.5.7 Dragging Movements",
            "level": "AA",
            "description": "All functionality that uses a dragging movement for operation can be achieved by a single pointer without dragging, unless dragging is essential or the functionality is determined by the user agent and not modified by the author.",
            "url": "https://www.w3.org/TR/WCAG22/#dragging-movements",
            "guideline_description": "Make it easier for users to operate functionality through various inputs beyond keyboard.",
            "special_cases": null,
            "techniques": [
                "Provide an alternative interface option, such as buttons or sliders, where users can incrementally adjust values or positions instead of dragging.",
                "Implement keyboard controls that allow users to perform the same actions as dragging, using keys like arrow keys for navigation or adjustment.",
                "Use touch or click events to offer tap-based interactions, allowing users to perform actions traditionally requiring dragging with simple taps or clicks.",
                "Incorporate gesture support that allows for single-tap actions to replace dragging, ensuring that these gestures are intuitive and well-documented for users.",
                "Design interfaces where dragging actions can be replicated with voice controls, allowing users to speak commands to achieve the same outcomes."
            ],
            "failures": [
                "Designing interfaces that rely solely on dragging without providing any alternative means of interaction.",
                "Creating custom drag-and-drop functionality without ensuring that equivalent actions can be performed via keyboard controls or other input methods.",
                "Failing to provide clear instructions or documentation for users on how to perform dragging actions using alternative inputs.",
                "Assuming that all users can perform precise dragging movements, which may not be possible for users with motor disabilities or those using assistive technologies."
            ]
        },
        {
            "name": "2.5.8 Target Size (Minimum)",
            "level": "AA",
            "description": "The size of the target for pointer inputs is at least 24 by 24 CSS pixels, except where:",
            "url": "https://www.w3.org/TR/WCAG22/#target-size-minimum",
            "guideline_description": "Make it easier for users to operate functionality through various inputs beyond keyboard.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Spacing",
                    "description": "Undersized targets (those less than 24 by 24 CSS pixels) are positioned so that if a 24 CSS pixel diameter circle is centered on the bounding box of each, the circles do not intersect another target or the circle for another undersized target;"
                },
                {
                    "type": "exception",
                    "title": "Equivalent",
                    "description": "The function can be achieved through a different control on the same page that meets this criterion;"
                },
                {
                    "type": "exception",
                    "title": "Inline",
                    "description": "The target is in a sentence or its size is otherwise constrained by the line-height of non-target text;"
                },
                {
                    "type": "exception",
                    "title": "User agent control",
                    "description": "The size of the target is determined by the user agent and is not modified by the author;"
                },
                {
                    "type": "exception",
                    "title": "Essential",
                    "description": "A particular presentation of the target is essential or is legally required for the information being conveyed."
                }
            ],
            "techniques": [
                "Ensure all interactive elements like buttons and links have a target size of at least 24 by 24 CSS pixels.",
                "Use CSS to add padding around small interactive elements to increase the clickable area to meet the target size requirement.",
                "Group small clickable elements together with sufficient spacing so that their touch targets do not overlap when considering a 24 CSS pixel diameter circle.",
                "Design custom controls (e.g., toggle switches, sliders) with a minimum size of 24 by 24 CSS pixels to ensure they are easily operable.",
                "Provide an alternative larger control elsewhere on the page that meets the target size requirement if an element must be smaller for design reasons."
            ],
            "failures": [
                "Designing buttons or links that are smaller than 24 by 24 CSS pixels without providing adequate spacing or alternatives.",
                "Positioning small interactive elements too close to each other, leading to overlapping touch targets.",
                "Modifying user agent controls (such as form elements) to reduce their size below 24 by 24 CSS pixels.",
                "Embedding small interactive elements within text without allowing for adequate clickable area expansion or spacing.",
                "Ignoring the need for larger targets in mobile or touch interfaces, where precision is reduced compared to desktop environments."
            ]
        },
        {
            "name": "3.1.1 Language of Page",
            "level": "A",
            "description": "The default human language of each Web page can be programmatically determined.",
            "url": "https://www.w3.org/TR/WCAG22/#language-of-page",
            "guideline_description": "Make text content readable and understandable.",
            "special_cases": null,
            "techniques": [
                "Use the `lang` attribute on the `<html>` element to specify the default language of the page.",
                "Ensure server-side templates or content management systems automatically set the `lang` attribute based on the content language.",
                "For multi-language pages, use the `lang` attribute on specific elements to indicate changes in language within the page content.",
                "Validate the language attribute value against ISO 639-1 language codes to ensure accurate language identification.",
                "Utilize automated testing tools to verify that the `lang` attribute is correctly implemented and matches the primary language of the content."
            ],
            "failures": [
                "Omitting the `lang` attribute on the `<html>` element, resulting in undetermined language for assistive technologies.",
                "Setting the `lang` attribute to an incorrect language code that does not match the content of the page.",
                "Failing to update the `lang` attribute when dynamically changing content language through client-side scripts.",
                "Using the same `lang` attribute value for all pages regardless of the actual language of the content."
            ]
        },
        {
            "name": "3.1.2 Language of Parts",
            "level": "AA",
            "description": "The human language of each passage or phrase in the content can be programmatically determined except for proper names, technical terms, words of indeterminate language, and words or phrases that have become part of the vernacular of the immediately surrounding text.",
            "url": "https://www.w3.org/TR/WCAG22/#language-of-parts",
            "guideline_description": "Make text content readable and understandable.",
            "special_cases": null,
            "techniques": [
                "Use the `lang` attribute in HTML to specify the language of different passages or phrases within the content.",
                "Implement language changes using the `xml:lang` attribute in XHTML documents to ensure compatibility with XML parsers.",
                "Utilize server-side scripting to dynamically set the `lang` attribute for different content sections based on user preferences or content metadata.",
                "Provide a mechanism for users to manually select the language of content sections, allowing the application to adjust the `lang` attribute accordingly.",
                "Use CSS to visually differentiate language changes, such as using different fonts or styles for different languages, while ensuring the `lang` attribute is correctly set."
            ],
            "failures": [
                "Omitting the `lang` attribute on passages or phrases in a different language than the main document language.",
                "Incorrectly setting the `lang` attribute, resulting in mismatches between the content language and the specified language.",
                "Using images or other non-text content to convey language-specific information without proper language indication or alternatives.",
                "Relying solely on user agents or browsers to automatically detect and set the language of parts without explicitly defining it in the code."
            ]
        },
        {
            "name": "3.1.3 Unusual Words",
            "level": "AAA",
            "description": "A mechanism is available for identifying specific definitions of words or phrases used in an unusual or restricted way, including idioms and jargon.",
            "url": "https://www.w3.org/TR/WCAG22/#unusual-words",
            "guideline_description": "Make text content readable and understandable.",
            "special_cases": null,
            "techniques": [
                "Provide a glossary or tooltip feature that offers definitions for unusual words or jargon when hovered over or clicked.",
                "Use hyperlinks to direct users to an online dictionary or glossary page that defines the unusual terms or idioms.",
                "Include a section at the beginning or end of a document or webpage that lists and defines all unusual words and phrases used within the content.",
                "Use ARIA `aria-describedby` to associate a definition with an unusual word or phrase, so screen readers can convey this information to users.",
                "Implement a toggle or button that users can activate to display definitions or explanations next to unusual words or phrases."
            ],
            "failures": [
                "Using complex jargon or idioms without providing any explanation or definition.",
                "Relying solely on context to infer the meaning of an unusual word or phrase, without offering a direct definition.",
                "Not updating or maintaining glossaries or definition lists, leading to outdated or incorrect explanations.",
                "Assuming all users will understand industry-specific jargon without providing any form of clarification."
            ]
        },
        {
            "name": "3.1.4 Abbreviations",
            "level": "AAA",
            "description": "A mechanism for identifying the expanded form or meaning of abbreviations is available.",
            "url": "https://www.w3.org/TR/WCAG22/#abbreviations",
            "guideline_description": "Make text content readable and understandable.",
            "special_cases": null,
            "techniques": [
                "Use the `<abbr>` HTML element with a `title` attribute to provide the expanded form of an abbreviation.",
                "Provide a glossary section on the website that lists all abbreviations and their meanings.",
                "Use tooltips or popovers that display the full form of an abbreviation when a user hovers over or focuses on the abbreviation.",
                "Include a link to an external resource or page that explains abbreviations in detail.",
                "Ensure that screen readers can announce the expanded form of abbreviations by using ARIA attributes like `aria-label` or `aria-labelledby`."
            ],
            "failures": [
                "Failing to use the `<abbr>` element or any alternative method to explain abbreviations.",
                "Providing the expanded form of an abbreviation only in a footnote that is not easily accessible from the abbreviation itself.",
                "Relying solely on context to explain abbreviations without any explicit explanation available.",
                "Using abbreviations in critical content without any means for users to discover their meanings."
            ]
        },
        {
            "name": "3.1.5 Reading Level",
            "level": "AAA",
            "description": "When text requires reading ability more advanced than the lower secondary education level after removal of proper names and titles, supplemental content, or a version that does not require reading ability more advanced than the lower secondary education level, is available.",
            "url": "https://www.w3.org/TR/WCAG22/#reading-level",
            "guideline_description": "Make text content readable and understandable.",
            "special_cases": null,
            "techniques": [
                "Provide a glossary or tooltips for complex terms to explain their meaning in simpler language.",
                "Offer a simplified summary or version of the content that uses plain language and shorter sentences.",
                "Use illustrations, diagrams, or videos to supplement and clarify complex text.",
                "Implement a \"read-aloud\" feature that provides an audio version of the content for users who may find it easier to understand spoken language.",
                "Break down information into bullet points or numbered lists to enhance clarity and comprehension."
            ],
            "failures": [
                "Presenting complex legal or technical documents without supplemental simplified versions.",
                "Using jargon or technical terms without providing explanations or alternatives.",
                "Relying solely on dense paragraphs of text without visual or interactive aids to support understanding."
            ]
        },
        {
            "name": "3.1.6 Pronunciation",
            "level": "AAA",
            "description": "A mechanism is available for identifying specific pronunciation of words where meaning of the words, in context, is ambiguous without knowing the pronunciation.",
            "url": "https://www.w3.org/TR/WCAG22/#pronunciation",
            "guideline_description": "Make text content readable and understandable.",
            "special_cases": null,
            "techniques": [],
            "failures": []
        },
        {
            "name": "3.2.1 On Focus",
            "level": "A",
            "description": "When any component receives focus, it does not initiate a change of context.",
            "url": "https://www.w3.org/TR/WCAG22/#on-focus",
            "guideline_description": "Make Web pages appear and operate in predictable ways.",
            "special_cases": null,
            "techniques": [
                "Ensure that form fields do not automatically submit or redirect users when they receive focus.",
                "Use JavaScript event listeners to separate focus events from actions that change context, like navigation.",
                "Implement focus management strategies that allow users to move through interactive elements without triggering unexpected changes.",
                "Provide clear instructions or notifications before focus is moved automatically within a page, such as when opening a modal dialog.",
                "Use CSS for styling focus states without triggering scripts or context changes on focus."
            ],
            "failures": [
                "Automatically submitting form data when a form field receives focus.",
                "Changing the entire page layout or content when a component gains focus.",
                "Redirecting users to a new page or URL upon focusing an element.",
                "Automatically opening pop-ups or new windows when a user tabs into a specific element."
            ]
        },
        {
            "name": "3.2.2 On Input",
            "level": "A",
            "description": "Changing the setting of any user interface component does not automatically cause a change of context unless the user has been advised of the behavior before using the component.",
            "url": "https://www.w3.org/TR/WCAG22/#on-input",
            "guideline_description": "Make Web pages appear and operate in predictable ways.",
            "special_cases": null,
            "techniques": [
                "Provide clear instructions or labels indicating when a change of context will occur, such as \"Selecting this option will open a new page.\"",
                "Use explicit submit buttons instead of automatically submitting forms upon input changes, allowing users to confirm their actions.",
                "Implement confirmation dialogs or notifications before a change of context occurs, giving users the opportunity to cancel if the change is unexpected.",
                "Use status messages or tooltips to inform users of the behavior of specific inputs that might cause a change of context.",
                "Ensure consistent behavior across similar components so users can predict the outcome of their interactions with those components."
            ],
            "failures": [
                "Automatically redirecting users to a different page when they select an option from a dropdown menu without prior warning.",
                "Changing the entire layout or content of a page when an input field loses focus without notifying the user beforehand.",
                "Automatically submitting a form when a user selects an option from a radio button group without an explicit submit action.",
                "Using input fields that trigger modal dialogs or pop-ups without any prior indication to the user."
            ]
        },
        {
            "name": "3.2.3 Consistent Navigation",
            "level": "AA",
            "description": "Navigational mechanisms that are repeated on multiple Web pages within a set of Web pages occur in the same relative order each time they are repeated, unless a change is initiated by the user.",
            "url": "https://www.w3.org/TR/WCAG22/#consistent-navigation",
            "guideline_description": "Make Web pages appear and operate in predictable ways.",
            "special_cases": null,
            "techniques": [
                "Maintain a consistent order for navigation links across all pages within the site.",
                "Use a template system to ensure the navigation bar remains identical across all pages.",
                "Include a breadcrumb trail in the same location on all pages to help users understand their current position within the site structure.",
                "Ensure that the main navigation menu is accessible and usable using a keyboard alone.",
                "Use CSS to style navigation elements consistently across pages, ensuring they appear in the same location and have the same visual cues.",
                "Implement a skip navigation link in the same position on each page to allow users to easily bypass repetitive content."
            ],
            "failures": [
                "Changing the order of menu items between different pages, leading to confusion and unpredictability.",
                "Having variations in navigation placement depending on the page, such as a sidebar on some pages but a top menu on others.",
                "Inconsistently labeling navigation links, causing users to question whether they lead to the same destination.",
                "Using different navigation styles or menus on different pages without user-initiated changes, disrupting the user experience."
            ]
        },
        {
            "name": "3.2.4 Consistent Identification",
            "level": "AA",
            "description": "Components that have the same functionality within a set of Web pages are identified consistently.",
            "url": "https://www.w3.org/TR/WCAG22/#consistent-identification",
            "guideline_description": "Make Web pages appear and operate in predictable ways.",
            "special_cases": null,
            "techniques": [
                "Use consistent labels and text for buttons that perform the same action across different pages.",
                "Apply the same icons and visual indicators for similar functions site-wide to maintain uniformity.",
                "Ensure that navigation menus are structured and labeled the same way on every page of the website.",
                "Maintain uniform color schemes and styles for links and interactive elements throughout the site.",
                "Use consistent HTML element structures (e.g., using `<button>` for all button functions) across different pages."
            ],
            "failures": [
                "Labeling a \"Submit\" button as \"Send\" on some pages and \"Submit\" on others for the same function.",
                "Using different icons for a \"search\" function, like a magnifying glass on one page and a different icon on another.",
                "Changing the order or naming of navigation links unpredictably across different pages.",
                "Using inconsistent heading levels or styles for similar content sections on various pages.",
                "Applying different color schemes or styles to the same type of interactive element on different parts of the website."
            ]
        },
        {
            "name": "3.2.5 Change on Request",
            "level": "AAA",
            "description": "Changes of context are initiated only by user request or a mechanism is available to turn off such changes.",
            "url": "https://www.w3.org/TR/WCAG22/#change-on-request",
            "guideline_description": "Make Web pages appear and operate in predictable ways.",
            "special_cases": null,
            "techniques": [
                "Implement user-controlled settings to enable or disable automatic context changes, such as page reloads or redirects.",
                "Use dialog boxes or confirmation prompts before initiating a change of context, allowing users to confirm or cancel the action.",
                "Provide settings or preferences for users to specify how they want context changes to be handled, such as opening links in the same tab or a new tab.",
                "Design form submissions to display confirmation messages or review pages before proceeding to a new context or page.",
                "Use JavaScript event handlers to detect user actions explicitly before triggering context changes, ensuring they are intentional and not automatic."
            ],
            "failures": [
                "Automatically redirecting users to a different page without their consent or notification.",
                "Changing the focus to a different input field or section of the page without user interaction.",
                "Submitting a form and navigating to a different page without a confirmation step or indication.",
                "Opening links or content in new tabs or windows automatically without a user action or preference setting.",
                "Using scripts or timers to automatically refresh or change content without a user-initiated request."
            ]
        },
        {
            "name": "3.2.6 Consistent Help",
            "level": "A",
            "description": "If a Web page contains any of the following help mechanisms, and those mechanisms are repeated on multiple Web pages within a set of Web pages, they occur in the same order relative to other page content, unless a change is initiated by the user:",
            "url": "https://www.w3.org/TR/WCAG22/#consistent-help",
            "guideline_description": "Make Web pages appear and operate in predictable ways.",
            "special_cases": [
                {
                    "type": "at_least_one",
                    "title": "Human contact details;"
                },
                {
                    "type": "at_least_one",
                    "title": "Human contact mechanism;"
                },
                {
                    "type": "at_least_one",
                    "title": "Self-help option;"
                },
                {
                    "type": "at_least_one",
                    "title": "A fully automated contact mechanism."
                }
            ],
            "techniques": [
                "Ensure that help links or icons (e.g., \"Contact Us,\" \"Help,\" \"FAQs\") are placed consistently in the same location across all pages of the website.",
                "Use a template or a content management system feature to maintain uniformity of help mechanism placement on all pages within a set of pages.",
                "Implement a consistent navigation order for help options (e.g., live chat, contact forms, FAQs) using both visual and code-based sequences.",
                "Provide a clear and consistent heading structure to group help-related content, making it easy to locate on different pages.",
                "Use CSS to maintain consistent styling and positioning of help features across all web pages to ensure visual predictability."
            ],
            "failures": [
                "Placing help links or contact information in different locations on different pages, causing confusion for users.",
                "Changing the order of help mechanisms (e.g., swapping the positions of a contact form and a live chat link) without user initiation.",
                "Failing to provide a consistent set of help options across all pages, leading to a lack of predictability.",
                "Inconsistently styling help links or icons (e.g., different colors or fonts) on different pages, making them hard to recognize."
            ]
        },
        {
            "name": "3.3.1 Error Identification",
            "level": "A",
            "description": "If an input error is automatically detected, the item that is in error is identified and the error is described to the user in text.",
            "url": "https://www.w3.org/TR/WCAG22/#error-identification",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": null,
            "techniques": [
                "Use clear and descriptive error messages that specify the nature of the error and how to correct it.",
                "Associate error messages with the relevant form fields using the `aria-describedby` attribute to enhance screen reader accessibility.",
                "Highlight the erroneous field visually by using a border or background color change, in addition to the text error message.",
                "Ensure error messages are placed close to the corresponding form fields to make them easy to find and understand.",
                "Provide immediate feedback for input errors, allowing users to understand and correct mistakes as they interact with the form."
            ],
            "failures": [
                "Displaying error messages only in a summary at the top of the form without associating them directly with the erroneous fields.",
                "Relying solely on visual cues, such as color or icons, to indicate errors without accompanying text descriptions.",
                "Using vague or generic error messages that do not clearly identify the error or how to resolve it.",
                "Failing to update error messages dynamically as users correct input errors, leaving outdated messages visible."
            ]
        },
        {
            "name": "3.3.2 Labels or Instructions",
            "level": "A",
            "description": "Labels or instructions are provided when content requires user input.",
            "url": "https://www.w3.org/TR/WCAG22/#labels-or-instructions",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": null,
            "techniques": [
                "Use clear and descriptive labels for form fields.",
                "Provide placeholder text in form fields that clarifies the expected input format.",
                "Offer inline instructions or tooltips adjacent to input fields to guide users.",
                "Group related form elements with fieldset and legend tags for better context.",
                "Use ARIA-describedby to associate input fields with additional instructions or error messages."
            ],
            "failures": [
                "Omitting labels for input fields, relying solely on placeholder text for identification.",
                "Providing labels that are too vague or ambiguous, such as \u201cEnter here\u201d without context.",
                "Placing instructions or labels too far from the corresponding input fields, causing confusion.",
                "Using only icons or symbols without text explanations for input fields or instructions."
            ]
        },
        {
            "name": "3.3.3 Error Suggestion",
            "level": "AA",
            "description": "If an input error is automatically detected and suggestions for correction are known, then the suggestions are provided to the user, unless it would jeopardize the security or purpose of the content.",
            "url": "https://www.w3.org/TR/WCAG22/#error-suggestion",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": null,
            "techniques": [
                "Provide inline error messages with clear instructions for correcting the input, such as suggesting valid formats or required fields.",
                "Use tooltip or help text that becomes visible when an error is detected, offering suggestions for correction.",
                "Implement live validation that provides immediate feedback and suggestions as users fill out form fields.",
                "Include example input within placeholder text or adjacent labels to guide users toward correct input formats.",
                "Offer a list of possible corrections or a dropdown menu with valid options when a common error is detected, like misspelled entries."
            ],
            "failures": [
                "Displaying generic error messages without suggesting how to correct the error.",
                "Only indicating an error exists without providing any form of assistance or suggestion for resolution.",
                "Relying solely on error codes or complex technical language that is not understandable to the average user.",
                "Failing to update error messages dynamically when a user corrects an input error, leaving users unsure if their correction was successful."
            ]
        },
        {
            "name": "3.3.4 Error Prevention (Legal, Financial, Data)",
            "level": "AA",
            "description": " For Web pages that cause legal commitments or financial transactions for the user to occur, that modify or delete user-controllable data in data storage systems, or that submit user test responses, at least one of the following is true:",
            "url": "https://www.w3.org/TR/WCAG22/#error-prevention-legal-financial-data",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": [
                {
                    "type": "at_least_one",
                    "title": "Reversible",
                    "description": "Submissions are reversible."
                },
                {
                    "type": "at_least_one",
                    "title": "Checked",
                    "description": "Data entered by the user is checked for input errors and the user is provided an opportunity to correct them."
                },
                {
                    "type": "at_least_one",
                    "title": "Confirmed",
                    "description": "A mechanism is available for reviewing, confirming, and correcting information before finalizing the submission."
                }
            ],
            "techniques": [
                "Implement a confirmation step before finalizing any transaction, allowing users to review and edit their input.",
                "Provide a clear and accessible \"undo\" option for submitted transactions or data changes where feasible.",
                "Use validation mechanisms that detect common input errors and prompt users to correct them before submission.",
                "Display a summary of critical information on a review page with an option to edit, before the final submission.",
                "Offer clear instructions and examples for input fields to minimize the chance of user errors."
            ],
            "failures": [
                "Finalizing transactions or data changes without giving users the opportunity to review or edit their input.",
                "Not providing error messages or guidance when incorrect data is entered.",
                "Allowing irreversible actions without a clear warning or confirmation step.",
                "Automatically processing financial transactions without a visible review or confirmation stage."
            ]
        },
        {
            "name": "3.3.5 Help",
            "level": "AAA",
            "description": "Context-sensitive help is available.",
            "url": "https://www.w3.org/TR/WCAG22/#help",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": null,
            "techniques": [
                "Provide a help icon or link near form fields that opens context-sensitive help information in a tooltip or modal.",
                "Include inline help text or hints directly below or beside form fields to guide users on what information is required.",
                "Incorporate a dedicated help section or FAQ page that is easily accessible from all pages of the application.",
                "Use tooltips with descriptive text that appear when users hover over or focus on interactive elements.",
                "Offer live chat support or a contact option for immediate assistance if users encounter difficulties."
            ],
            "failures": [
                "Providing help information that is not specific to the context or task the user is performing.",
                "Hiding help links or icons in a way that makes them difficult to discover or access.",
                "Requiring users to leave the current task or form to access help information, disrupting their workflow.",
                "Failing to update help content when changes are made to the application, leading to outdated or incorrect information."
            ]
        },
        {
            "name": "3.3.6 Error Prevention (All)",
            "level": "AAA",
            "description": "For Web pages that require the user to submit information, at least one of the following is true:",
            "url": "https://www.w3.org/TR/WCAG22/#error-prevention-all",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": [
                {
                    "type": "at_least_one",
                    "title": "Reversible",
                    "description": "Submissions are reversible."
                },
                {
                    "type": "at_least_one",
                    "title": "Checked",
                    "description": "Data entered by the user is checked for input errors and the user is provided an opportunity to correct them."
                },
                {
                    "type": "at_least_one",
                    "title": "Confirmed",
                    "description": "A mechanism is available for reviewing, confirming, and correcting information before finalizing the submission."
                }
            ],
            "techniques": [
                "Implement a \"Review and Confirm\" page before final submission, allowing users to review and edit their information.",
                "Provide clear error messages next to form fields that have issues, explaining what needs to be corrected.",
                "Allow users to undo submissions or provide an option to cancel the submission process before it is finalized.",
                "Use input validation to check for common errors (e.g., invalid email formats) and prompt users with suggestions for correction.",
                "Offer a confirmation dialog after the user submits a form, summarizing the submission and allowing for last-minute changes."
            ],
            "failures": [
                "Automatically processing submissions without allowing users to review or confirm their input.",
                "Providing vague or non-specific error messages that do not guide users on how to correct their errors.",
                "Not including a mechanism to cancel or reverse a submission after it has been made.",
                "Failing to validate user input for common mistakes, leaving users unaware of errors in their submissions."
            ]
        },
        {
            "name": "3.3.7 Redundant Entry",
            "level": "A",
            "description": "Information previously entered by or provided to the user that is required to be entered again in the same process is either:",
            "url": "https://www.w3.org/TR/WCAG22/#redundant-entry",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": [
                {
                    "type": "at_least_one",
                    "title": "auto-populated, or"
                },
                {
                    "type": "at_least_one",
                    "title": "available for the user to select."
                },
                {
                    "type": "exception",
                    "title": "re-entering the information is essential,"
                },
                {
                    "type": "exception",
                    "title": "the information is required to ensure the security of the content, or"
                },
                {
                    "type": "exception",
                    "title": "previously entered information is no longer valid."
                }
            ],
            "techniques": [
                "Implement session storage to retain user input during multi-step processes, allowing previously entered information to be auto-populated.",
                "Use browser autofill features to allow users to select previously entered information for common fields such as name and address.",
                "Design forms with pre-filled fields based on user profile information when the user is logged in.",
                "Provide a review screen before final submission, displaying all entered information and allowing users to edit without re-entering data.",
                "Use server-side data storage to remember user inputs across sessions for returning users, while ensuring data privacy and security."
            ],
            "failures": [
                "Requiring users to manually re-enter their information on each step of a multi-step form without providing auto-fill options.",
                "Not retaining user input in form fields when a page is reloaded or when navigating back to a previous step in a process.",
                "Forcing users to re-enter information that hasn\u2019t changed when updating their profile or making repeat purchases.",
                "Failing to provide a mechanism for users to select previously entered information, leading to unnecessary repetition.",
                "Invalidating previously entered information without clear indication, causing users to re-enter data without understanding the need."
            ]
        },
        {
            "name": "3.3.8 Accessible Authentication (Minimum)",
            "level": "AA",
            "description": "A cognitive function test (such as remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of the following:",
            "url": "https://www.w3.org/TR/WCAG22/#accessible-authentication-minimum",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Alternative",
                    "description": "Another authentication method that does not rely on a cognitive function test."
                },
                {
                    "type": "exception",
                    "title": "Mechanism",
                    "description": "A mechanism is available to assist the user in completing the cognitive function test."
                },
                {
                    "type": "exception",
                    "title": "Object Recognition",
                    "description": "The cognitive function test is to recognize objects."
                },
                {
                    "type": "exception",
                    "title": "Personal Content",
                    "description": "The cognitive function test is to identify non-text content the user provided to the Web site."
                }
            ],
            "techniques": [
                "Implement passwordless authentication methods such as email or SMS-based one-time codes.",
                "Use biometric authentication options like fingerprint or facial recognition.",
                "Provide a password manager integration to help users recall and fill in passwords automatically.",
                "Offer a \"magic link\" system where users can log in by clicking a link sent to their email.",
                "Enable social media or third-party authentication options that users might already have access to without needing to remember additional credentials."
            ],
            "failures": [
                "Requiring users to solve CAPTCHAs or puzzles without offering an alternative method.",
                "Mandating complex passwords that users must memorize without providing a password manager suggestion or integration.",
                "Using security questions that rely on recalling specific personal information without providing an alternative authentication method.",
                "Not providing any assistance or alternative for users struggling with cognitive function tests during the login process."
            ]
        },
        {
            "name": "3.3.9 Accessible Authentication (Enhanced)",
            "level": "AAA",
            "description": "A cognitive function test (such as remembering a password or solving a puzzle) is not required for any step in an authentication process unless that step provides at least one of the following:",
            "url": "https://www.w3.org/TR/WCAG22/#accessible-authentication-enhanced",
            "guideline_description": "Help users avoid and correct mistakes.",
            "special_cases": [
                {
                    "type": "exception",
                    "title": "Alternative",
                    "description": "Another authentication method that does not rely on a cognitive function test."
                },
                {
                    "type": "exception",
                    "title": "Mechanism",
                    "description": "A mechanism is available to assist the user in completing the cognitive function test."
                }
            ],
            "techniques": [
                "Implement passwordless authentication methods, such as using biometric authentication (fingerprint or facial recognition) or email-based magic links.",
                "Offer social login options that allow users to authenticate using existing accounts from social media platforms or other trusted services.",
                "Use one-time passcodes (OTPs) sent via SMS or email as an alternative to password-based authentication.",
                "Provide a password manager integration that allows users to easily fill in authentication forms without remembering passwords.",
                "Ensure that any cognitive function test, like CAPTCHA, is accompanied by an accessible alternative, such as an audio CAPTCHA or a simple checkbox to verify the user."
            ],
            "failures": [
                "Requiring users to solve complex puzzles or CAPTCHAs without providing an accessible alternative.",
                "Offering only password-based authentication without any additional or alternative methods that do not require memory recall.",
                "Not providing assistance or mechanisms to help users complete authentication tasks if they struggle with cognitive function tests.",
                "Implementing multifactor authentication that relies solely on tasks requiring memory or problem-solving, without alternatives.",
                "Using authentication steps that require users to recall answers to security questions without offering other options."
            ]
        },
        {
            "name": "4.1.1 Parsing",
            "level": "A",
            "description": "In content implemented using markup languages, elements have complete start and end tags, elements are nested according to their specifications, elements do not contain duplicate attributes, and any IDs are unique, except where the specifications allow these features.",
            "url": "https://www.w3.org/TR/WCAG22/#parsing",
            "guideline_description": "Maximize compatibility with current and future user agents, including assistive technologies.",
            "special_cases": null,
            "techniques": [
                "Use a validator tool (such as the W3C Markup Validation Service) to check for and correct any markup errors in HTML documents.",
                "Ensure that every HTML element has a proper opening and closing tag, and that self-closing tags are used appropriately.",
                "Verify that all HTML elements are properly nested according to the HTML specification, such as ensuring `<li>` elements are nested within `<ul>` or `<ol>` tags.",
                "Check that each attribute within an element is unique, and avoid duplicating attributes within the same tag.",
                "Assign unique IDs to elements across the entire document or application to prevent ID duplication, which can cause conflicts in scripts and styling."
            ],
            "failures": [
                "Leaving HTML elements unclosed, or using incorrect closing tags, such as closing a `<div>` with `</span>`.",
                "Nesting HTML elements incorrectly, such as placing a `<p>` tag directly inside a `<span>`.",
                "Using the same ID for multiple elements on the same page, which can interfere with JavaScript functionality and CSS styling.",
                "Including duplicate attributes within the same HTML element, such as specifying `class` multiple times on a single tag."
            ]
        },
        {
            "name": "4.1.2 Name, Role, Value",
            "level": "A",
            "description": "For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.",
            "url": "https://www.w3.org/TR/WCAG22/#name-role-value",
            "guideline_description": "Maximize compatibility with current and future user agents, including assistive technologies.",
            "special_cases": null,
            "techniques": [
                "Use ARIA roles, states, and properties to convey the name, role, and value of custom widgets.",
                "Ensure that form elements have associated labels using the `<label>` element or the `aria-label`/`aria-labelledby` attributes.",
                "Use appropriate HTML elements (e.g., `<button>`, `<input>`, `<select>`) to ensure default roles and states are communicated to assistive technologies.",
                "Implement dynamic updates using ARIA live regions to inform users of changes in content or values.",
                "Ensure that changes in user interface components are communicated to assistive technologies by using the `aria-live` attribute where necessary."
            ],
            "failures": [
                "Failing to provide accessible names for interactive elements, resulting in unidentified controls for screen readers.",
                "Relying solely on visual cues without programmatically setting roles, making components invisible to assistive technologies.",
                "Not updating the accessibility tree when the value or state of a component changes, leading to outdated information for screen reader users.",
                "Using custom scripts to create controls without appropriate ARIA roles, resulting in inaccessible custom components.",
                "Omitting the use of `aria-checked` or equivalent properties for toggle buttons or checkboxes, causing incorrect state reporting to assistive technologies."
            ]
        },
        {
            "name": "4.1.3 Status Messages",
            "level": "AA",
            "description": "In content implemented using markup languages, status messages can be programmatically determined through role or properties such that they can be presented to the user by assistive technologies without receiving focus.",
            "url": "https://www.w3.org/TR/WCAG22/#status-messages",
            "guideline_description": "Maximize compatibility with current and future user agents, including assistive technologies.",
            "special_cases": null,
            "techniques": [
                "Use ARIA live regions (e.g., `aria-live=\"polite\"` or `aria-live=\"assertive\"`) to announce status messages to assistive technologies.",
                "Utilize `role=\"status\"` to automatically announce status updates without changing focus.",
                "Apply `aria-atomic=\"true\"` to ensure that the entire message is read when the status message changes.",
                "Implement `aria-busy` to inform screen readers when parts of the page are loading or updating.",
                "Use `role=\"alert\"` for urgent messages that need immediate attention without moving focus."
            ],
            "failures": [
                "Failing to use any ARIA roles or properties to announce status messages.",
                "Updating content dynamically without notifying assistive technologies, causing users to miss important information.",
                "Using non-semantic markup or visual cues alone to indicate status changes, making them inaccessible to screen readers.",
                "Overusing `aria-live=\"assertive\"` which can interrupt the user's current task, causing confusion."
            ]
        }
    ]
}